exports[`GraphQL-Platform > Works > generates a valid GraphQL Schema 1`] = `
"schema {\\n  query: query\\n  mutation: mutation\\n  subscription: subscription\\n}\\n\\ntype query {\\n  \\"\\"\\"\\n  Gets the number of \\"Articles\\"\\n  \\"\\"\\"\\n  articleCount(where: ArticleFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"Article\\" exists or not?\\"\\"\\"\\n  articleExists(where: ArticleUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"Articles\\"\\n  \\"\\"\\"\\n  articles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"Retrieves one \\"Article\\", throws an error if it does not exist\\"\\"\\"\\n  article(where: ArticleUniqueFilterInput!): Article!\\n\\n  \\"\\"\\"Retrieves one \\"Article\\" if it exists, returns null otherwise\\"\\"\\"\\n  articleIfExists(where: ArticleUniqueFilterInput!): Article\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Articles\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  articlesInOrder(\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Articles\\", or null, in the same order\\n  \\"\\"\\"\\n  articlesInOrderIfExists(\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article]!\\n\\n  \\"\\"\\"Custom query to get articles\\"\\"\\"\\n  customArticles: UnsignedInt!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"ArticleExtensions\\"\\n  \\"\\"\\"\\n  articleExtensionCount(where: ArticleExtensionFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"ArticleExtension\\" exists or not?\\"\\"\\"\\n  articleExtensionExists(where: ArticleExtensionUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"ArticleExtensions\\"\\n  \\"\\"\\"\\n  articleExtensions(where: ArticleExtensionFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleExtension!]!\\n\\n  \\"\\"\\"Retrieves one \\"ArticleExtension\\", throws an error if it does not exist\\"\\"\\"\\n  articleExtension(where: ArticleExtensionUniqueFilterInput!): ArticleExtension!\\n\\n  \\"\\"\\"Retrieves one \\"ArticleExtension\\" if it exists, returns null otherwise\\"\\"\\"\\n  articleExtensionIfExists(where: ArticleExtensionUniqueFilterInput!): ArticleExtension\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleExtensions\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  articleExtensionsInOrder(\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleExtensions\\", or null, in the same order\\n  \\"\\"\\"\\n  articleExtensionsInOrderIfExists(\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"Categories\\"\\n  \\"\\"\\"\\n  categoryCount(where: CategoryFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"Category\\" exists or not?\\"\\"\\"\\n  categoryExists(where: CategoryUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"Categories\\"\\n  \\"\\"\\"\\n  categories(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Category!]!\\n\\n  \\"\\"\\"Retrieves one \\"Category\\", throws an error if it does not exist\\"\\"\\"\\n  category(where: CategoryUniqueFilterInput!): Category!\\n\\n  \\"\\"\\"Retrieves one \\"Category\\" if it exists, returns null otherwise\\"\\"\\"\\n  categoryIfExists(where: CategoryUniqueFilterInput!): Category\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Categories\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  categoriesInOrder(\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Categories\\", or null, in the same order\\n  \\"\\"\\"\\n  categoriesInOrderIfExists(\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"Tags\\"\\n  \\"\\"\\"\\n  tagCount(where: TagFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"Tag\\" exists or not?\\"\\"\\"\\n  tagExists(where: TagUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"Tags\\"\\n  \\"\\"\\"\\n  tags(where: TagFilterInput, orderBy: [TagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Tag!]!\\n\\n  \\"\\"\\"Retrieves one \\"Tag\\", throws an error if it does not exist\\"\\"\\"\\n  tag(where: TagUniqueFilterInput!): Tag!\\n\\n  \\"\\"\\"Retrieves one \\"Tag\\" if it exists, returns null otherwise\\"\\"\\"\\n  tagIfExists(where: TagUniqueFilterInput!): Tag\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Tags\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  tagsInOrder(\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Tags\\", or null, in the same order\\n  \\"\\"\\"\\n  tagsInOrderIfExists(\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"ArticleTags\\"\\n  \\"\\"\\"\\n  articleTagCount(where: ArticleTagFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"ArticleTag\\" exists or not?\\"\\"\\"\\n  articleTagExists(where: ArticleTagUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"ArticleTags\\"\\n  \\"\\"\\"\\n  articleTags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!\\n\\n  \\"\\"\\"Retrieves one \\"ArticleTag\\", throws an error if it does not exist\\"\\"\\"\\n  articleTag(where: ArticleTagUniqueFilterInput!): ArticleTag!\\n\\n  \\"\\"\\"Retrieves one \\"ArticleTag\\" if it exists, returns null otherwise\\"\\"\\"\\n  articleTagIfExists(where: ArticleTagUniqueFilterInput!): ArticleTag\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleTags\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  articleTagsInOrder(\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleTags\\", or null, in the same order\\n  \\"\\"\\"\\n  articleTagsInOrderIfExists(\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"ArticleTagModerations\\"\\n  \\"\\"\\"\\n  articleTagModerationCount(where: ArticleTagModerationFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"ArticleTagModeration\\" exists or not?\\"\\"\\"\\n  articleTagModerationExists(where: ArticleTagModerationUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"ArticleTagModerations\\"\\n  \\"\\"\\"\\n  articleTagModerations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Retrieves one \\"ArticleTagModeration\\", throws an error if it does not exist\\n  \\"\\"\\"\\n  articleTagModeration(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration!\\n\\n  \\"\\"\\"\\n  Retrieves one \\"ArticleTagModeration\\" if it exists, returns null otherwise\\n  \\"\\"\\"\\n  articleTagModerationIfExists(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleTagModerations\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  articleTagModerationsInOrder(\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"ArticleTagModerations\\", or null, in the same order\\n  \\"\\"\\"\\n  articleTagModerationsInOrderIfExists(\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"Users\\"\\n  \\"\\"\\"\\n  userCount(where: UserFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"User\\" exists or not?\\"\\"\\"\\n  userExists(where: UserUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"Users\\"\\n  \\"\\"\\"\\n  users(where: UserFilterInput, orderBy: [UserOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [User!]!\\n\\n  \\"\\"\\"Retrieves one \\"User\\", throws an error if it does not exist\\"\\"\\"\\n  user(where: UserUniqueFilterInput!): User!\\n\\n  \\"\\"\\"Retrieves one \\"User\\" if it exists, returns null otherwise\\"\\"\\"\\n  userIfExists(where: UserUniqueFilterInput!): User\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Users\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  usersInOrder(\\n    where: [UserUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserFilterInput\\n  ): [User!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"Users\\", or null, in the same order\\n  \\"\\"\\"\\n  usersInOrderIfExists(\\n    where: [UserUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserFilterInput\\n  ): [User]!\\n\\n  \\"\\"\\"\\n  Gets the number of \\"UserProfiles\\"\\n  \\"\\"\\"\\n  userProfileCount(where: UserProfileFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"Either the \\"UserProfile\\" exists or not?\\"\\"\\"\\n  userProfileExists(where: UserProfileUniqueFilterInput!): Boolean!\\n\\n  \\"\\"\\"\\n  Retrieves a list of \\"UserProfiles\\"\\n  \\"\\"\\"\\n  userProfiles(where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [UserProfile!]!\\n\\n  \\"\\"\\"Retrieves one \\"UserProfile\\", throws an error if it does not exist\\"\\"\\"\\n  userProfile(where: UserProfileUniqueFilterInput!): UserProfile!\\n\\n  \\"\\"\\"Retrieves one \\"UserProfile\\" if it exists, returns null otherwise\\"\\"\\"\\n  userProfileIfExists(where: UserProfileUniqueFilterInput!): UserProfile\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"UserProfiles\\" in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  userProfilesInOrder(\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile!]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, retrieves the corresponding \\"UserProfiles\\", or null, in the same order\\n  \\"\\"\\"\\n  userProfilesInOrderIfExists(\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile]!\\n  whoAmI: String!\\n}\\n\\n\\"\\"\\"\\nThe \`UnsignedInt\` scalar type represents non-fractional unsigned whole numeric values, it can represent values between 0 and 4294967294 (= 2^32 - 1).\\n\\"\\"\\"\\nscalar UnsignedInt\\n\\n\\"\\"\\"The \\"Article\\" nodes' filter\\"\\"\\"\\ninput ArticleFilterInput {\\n  id: UUIDv4\\n  id_not: UUIDv4\\n  id_in: [UUIDv4!]\\n  id_not_in: [UUIDv4!]\\n  status: ArticleStatus\\n  status_not: ArticleStatus\\n  status_in: [ArticleStatus!]\\n  status_not_in: [ArticleStatus!]\\n  title: NonEmptyTrimmedString\\n  title_not: NonEmptyTrimmedString\\n  title_in: [NonEmptyTrimmedString!]\\n  title_not_in: [NonEmptyTrimmedString!]\\n  title_contains: NonEmptyString\\n  title_not_contains: NonEmptyString\\n  title_starts_with: NonEmptyString\\n  title_not_starts_with: NonEmptyString\\n  title_ends_with: NonEmptyString\\n  title_not_ends_with: NonEmptyString\\n  slug: NonEmptyTrimmedString\\n  slug_not: NonEmptyTrimmedString\\n  slug_in: [NonEmptyTrimmedString!]\\n  slug_not_in: [NonEmptyTrimmedString!]\\n  slug_contains: NonEmptyString\\n  slug_not_contains: NonEmptyString\\n  slug_starts_with: NonEmptyString\\n  slug_not_starts_with: NonEmptyString\\n  slug_ends_with: NonEmptyString\\n  slug_not_ends_with: NonEmptyString\\n  body_is_null: Boolean\\n  body_contains: NonEmptyString\\n  body_not_contains: NonEmptyString\\n  body_starts_with: NonEmptyString\\n  body_not_starts_with: NonEmptyString\\n  body_ends_with: NonEmptyString\\n  body_not_ends_with: NonEmptyString\\n  category: CategoryFilterInput\\n  category_not: CategoryFilterInput\\n  category_is_null: Boolean\\n  createdBy: UserFilterInput\\n  createdBy_not: UserFilterInput\\n  createdBy_is_null: Boolean\\n  createdAt: DateTime\\n  createdAt_not: DateTime\\n  createdAt_in: [DateTime!]\\n  createdAt_not_in: [DateTime!]\\n  createdAt_gt: DateTime\\n  createdAt_gte: DateTime\\n  createdAt_lt: DateTime\\n  createdAt_lte: DateTime\\n  updatedBy: UserFilterInput\\n  updatedBy_not: UserFilterInput\\n  updatedBy_is_null: Boolean\\n  updatedAt: DateTime\\n  updatedAt_not: DateTime\\n  updatedAt_in: [DateTime!]\\n  updatedAt_not_in: [DateTime!]\\n  updatedAt_gt: DateTime\\n  updatedAt_gte: DateTime\\n  updatedAt_lt: DateTime\\n  updatedAt_lte: DateTime\\n  metas_is_null: Boolean\\n  highlighted: Boolean\\n  highlighted_not: Boolean\\n  highlighted_in: [Boolean]\\n  highlighted_not_in: [Boolean]\\n  highlighted_is_null: Boolean\\n  sponsored: Boolean\\n  sponsored_not: Boolean\\n  sponsored_in: [Boolean]\\n  sponsored_not_in: [Boolean]\\n  sponsored_is_null: Boolean\\n  views: UnsignedBigInt\\n  views_not: UnsignedBigInt\\n  views_in: [UnsignedBigInt!]\\n  views_not_in: [UnsignedBigInt!]\\n  views_gt: UnsignedBigInt\\n  views_gte: UnsignedBigInt\\n  views_lt: UnsignedBigInt\\n  views_lte: UnsignedBigInt\\n  score: UnsignedFloat\\n  score_not: UnsignedFloat\\n  score_in: [UnsignedFloat!]\\n  score_not_in: [UnsignedFloat!]\\n  score_gt: UnsignedFloat\\n  score_gte: UnsignedFloat\\n  score_lt: UnsignedFloat\\n  score_lte: UnsignedFloat\\n  machineTags_is_null: Boolean\\n  tags_every: ArticleTagFilterInput\\n  tags_some: ArticleTagFilterInput\\n  tags_none: ArticleTagFilterInput\\n  tagCount: UnsignedInt\\n  tagCount_not: UnsignedInt\\n  tagCount_gt: UnsignedInt\\n  tagCount_gte: UnsignedInt\\n  tagCount_lt: UnsignedInt\\n  tagCount_lte: UnsignedInt\\n  extension: ArticleExtensionFilterInput\\n  extension_not: ArticleExtensionFilterInput\\n  extension_is_null: Boolean\\n  AND: [ArticleFilterInput]\\n  OR: [ArticleFilterInput]\\n  NOT: ArticleFilterInput\\n}\\n\\n\\"\\"\\"A field whose value is a Universally Unique Identifier.\\"\\"\\"\\nscalar UUIDv4 @specifiedBy(url: \\"https://en.wikipedia.org/wiki/Universally_unique_identifier\\")\\n\\nenum ArticleStatus {\\n  DRAFT\\n  PUBLISHED\\n  DELETED\\n}\\n\\n\\"\\"\\"A string in which the leading and trailing whitespaces are removed.\\"\\"\\"\\nscalar NonEmptyTrimmedString\\n\\n\\"\\"\\"A non-empty string.\\"\\"\\"\\nscalar NonEmptyString\\n\\n\\"\\"\\"The \\"Category\\" nodes' filter\\"\\"\\"\\ninput CategoryFilterInput {\\n  id: UUIDv4\\n  id_not: UUIDv4\\n  id_in: [UUIDv4!]\\n  id_not_in: [UUIDv4!]\\n  title: NonEmptyTrimmedString\\n  title_not: NonEmptyTrimmedString\\n  title_in: [NonEmptyTrimmedString!]\\n  title_not_in: [NonEmptyTrimmedString!]\\n  title_contains: NonEmptyString\\n  title_not_contains: NonEmptyString\\n  title_starts_with: NonEmptyString\\n  title_not_starts_with: NonEmptyString\\n  title_ends_with: NonEmptyString\\n  title_not_ends_with: NonEmptyString\\n  slug: NonEmptyTrimmedString\\n  slug_not: NonEmptyTrimmedString\\n  slug_in: [NonEmptyTrimmedString!]\\n  slug_not_in: [NonEmptyTrimmedString!]\\n  slug_contains: NonEmptyString\\n  slug_not_contains: NonEmptyString\\n  slug_starts_with: NonEmptyString\\n  slug_not_starts_with: NonEmptyString\\n  slug_ends_with: NonEmptyString\\n  slug_not_ends_with: NonEmptyString\\n  parent: CategoryFilterInput\\n  parent_not: CategoryFilterInput\\n  parent_is_null: Boolean\\n  order: UnsignedInt\\n  order_not: UnsignedInt\\n  order_in: [UnsignedInt!]\\n  order_not_in: [UnsignedInt!]\\n  order_gt: UnsignedInt\\n  order_gte: UnsignedInt\\n  order_lt: UnsignedInt\\n  order_lte: UnsignedInt\\n  children_every: CategoryFilterInput\\n  children_some: CategoryFilterInput\\n  children_none: CategoryFilterInput\\n  childCount: UnsignedInt\\n  childCount_not: UnsignedInt\\n  childCount_gt: UnsignedInt\\n  childCount_gte: UnsignedInt\\n  childCount_lt: UnsignedInt\\n  childCount_lte: UnsignedInt\\n  articles_every: ArticleFilterInput\\n  articles_some: ArticleFilterInput\\n  articles_none: ArticleFilterInput\\n  articleCount: UnsignedInt\\n  articleCount_not: UnsignedInt\\n  articleCount_gt: UnsignedInt\\n  articleCount_gte: UnsignedInt\\n  articleCount_lt: UnsignedInt\\n  articleCount_lte: UnsignedInt\\n  AND: [CategoryFilterInput]\\n  OR: [CategoryFilterInput]\\n  NOT: CategoryFilterInput\\n}\\n\\n\\"\\"\\"The \\"User\\" nodes' filter\\"\\"\\"\\ninput UserFilterInput {\\n  id: UUIDv4\\n  id_not: UUIDv4\\n  id_in: [UUIDv4!]\\n  id_not_in: [UUIDv4!]\\n  username: NonEmptyTrimmedString\\n  username_not: NonEmptyTrimmedString\\n  username_in: [NonEmptyTrimmedString!]\\n  username_not_in: [NonEmptyTrimmedString!]\\n  username_contains: NonEmptyString\\n  username_not_contains: NonEmptyString\\n  username_starts_with: NonEmptyString\\n  username_not_starts_with: NonEmptyString\\n  username_ends_with: NonEmptyString\\n  username_not_ends_with: NonEmptyString\\n  createdArticles_every: ArticleFilterInput\\n  createdArticles_some: ArticleFilterInput\\n  createdArticles_none: ArticleFilterInput\\n  createdArticleCount: UnsignedInt\\n  createdArticleCount_not: UnsignedInt\\n  createdArticleCount_gt: UnsignedInt\\n  createdArticleCount_gte: UnsignedInt\\n  createdArticleCount_lt: UnsignedInt\\n  createdArticleCount_lte: UnsignedInt\\n  updatedArticles_every: ArticleFilterInput\\n  updatedArticles_some: ArticleFilterInput\\n  updatedArticles_none: ArticleFilterInput\\n  updatedArticleCount: UnsignedInt\\n  updatedArticleCount_not: UnsignedInt\\n  updatedArticleCount_gt: UnsignedInt\\n  updatedArticleCount_gte: UnsignedInt\\n  updatedArticleCount_lt: UnsignedInt\\n  updatedArticleCount_lte: UnsignedInt\\n  profile: UserProfileFilterInput\\n  profile_not: UserProfileFilterInput\\n  profile_is_null: Boolean\\n  articleTagModerations_every: ArticleTagModerationFilterInput\\n  articleTagModerations_some: ArticleTagModerationFilterInput\\n  articleTagModerations_none: ArticleTagModerationFilterInput\\n  articleTagModerationCount: UnsignedInt\\n  articleTagModerationCount_not: UnsignedInt\\n  articleTagModerationCount_gt: UnsignedInt\\n  articleTagModerationCount_gte: UnsignedInt\\n  articleTagModerationCount_lt: UnsignedInt\\n  articleTagModerationCount_lte: UnsignedInt\\n  AND: [UserFilterInput]\\n  OR: [UserFilterInput]\\n  NOT: UserFilterInput\\n}\\n\\n\\"\\"\\"The \\"UserProfile\\" nodes' filter\\"\\"\\"\\ninput UserProfileFilterInput {\\n  user: UserFilterInput\\n  user_not: UserFilterInput\\n  birthday: Date\\n  birthday_not: Date\\n  birthday_in: [Date]\\n  birthday_not_in: [Date]\\n  birthday_gt: Date\\n  birthday_gte: Date\\n  birthday_lt: Date\\n  birthday_lte: Date\\n  birthday_is_null: Boolean\\n  facebookId: ID\\n  facebookId_not: ID\\n  facebookId_in: [ID]\\n  facebookId_not_in: [ID]\\n  facebookId_is_null: Boolean\\n  googleId: ID\\n  googleId_not: ID\\n  googleId_in: [ID]\\n  googleId_not_in: [ID]\\n  googleId_is_null: Boolean\\n  twitterHandle: ID\\n  twitterHandle_not: ID\\n  twitterHandle_in: [ID]\\n  twitterHandle_not_in: [ID]\\n  twitterHandle_is_null: Boolean\\n  AND: [UserProfileFilterInput]\\n  OR: [UserProfileFilterInput]\\n  NOT: UserProfileFilterInput\\n}\\n\\n\\"\\"\\"\\nA date string, such as \\"2007-12-03\\", compliant with the ISO 8601 extended format.\\n\\"\\"\\"\\nscalar Date @specifiedBy(url: \\"https://en.wikipedia.org/wiki/ISO_8601\\")\\n\\n\\"\\"\\"The \\"ArticleTagModeration\\" nodes' filter\\"\\"\\"\\ninput ArticleTagModerationFilterInput {\\n  articleTag: ArticleTagFilterInput\\n  articleTag_not: ArticleTagFilterInput\\n  moderator: UserFilterInput\\n  moderator_not: UserFilterInput\\n  moderation: NonEmptyTrimmedString\\n  moderation_not: NonEmptyTrimmedString\\n  moderation_in: [NonEmptyTrimmedString]\\n  moderation_not_in: [NonEmptyTrimmedString]\\n  moderation_is_null: Boolean\\n  moderation_contains: NonEmptyString\\n  moderation_not_contains: NonEmptyString\\n  moderation_starts_with: NonEmptyString\\n  moderation_not_starts_with: NonEmptyString\\n  moderation_ends_with: NonEmptyString\\n  moderation_not_ends_with: NonEmptyString\\n  AND: [ArticleTagModerationFilterInput]\\n  OR: [ArticleTagModerationFilterInput]\\n  NOT: ArticleTagModerationFilterInput\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" nodes' filter\\"\\"\\"\\ninput ArticleTagFilterInput {\\n  article: ArticleFilterInput\\n  article_not: ArticleFilterInput\\n  tag: TagFilterInput\\n  tag_not: TagFilterInput\\n  order: UnsignedInt\\n  order_not: UnsignedInt\\n  order_in: [UnsignedInt!]\\n  order_not_in: [UnsignedInt!]\\n  order_gt: UnsignedInt\\n  order_gte: UnsignedInt\\n  order_lt: UnsignedInt\\n  order_lte: UnsignedInt\\n  moderations_every: ArticleTagModerationFilterInput\\n  moderations_some: ArticleTagModerationFilterInput\\n  moderations_none: ArticleTagModerationFilterInput\\n  moderationCount: UnsignedInt\\n  moderationCount_not: UnsignedInt\\n  moderationCount_gt: UnsignedInt\\n  moderationCount_gte: UnsignedInt\\n  moderationCount_lt: UnsignedInt\\n  moderationCount_lte: UnsignedInt\\n  AND: [ArticleTagFilterInput]\\n  OR: [ArticleTagFilterInput]\\n  NOT: ArticleTagFilterInput\\n}\\n\\n\\"\\"\\"The \\"Tag\\" nodes' filter\\"\\"\\"\\ninput TagFilterInput {\\n  id: UUIDv4\\n  id_not: UUIDv4\\n  id_in: [UUIDv4!]\\n  id_not_in: [UUIDv4!]\\n  deprecated: Boolean\\n  deprecated_not: Boolean\\n  deprecated_in: [Boolean]\\n  deprecated_not_in: [Boolean]\\n  deprecated_is_null: Boolean\\n  title: NonEmptyTrimmedString\\n  title_not: NonEmptyTrimmedString\\n  title_in: [NonEmptyTrimmedString!]\\n  title_not_in: [NonEmptyTrimmedString!]\\n  title_contains: NonEmptyString\\n  title_not_contains: NonEmptyString\\n  title_starts_with: NonEmptyString\\n  title_not_starts_with: NonEmptyString\\n  title_ends_with: NonEmptyString\\n  title_not_ends_with: NonEmptyString\\n  slug: NonEmptyTrimmedString\\n  slug_not: NonEmptyTrimmedString\\n  slug_in: [NonEmptyTrimmedString!]\\n  slug_not_in: [NonEmptyTrimmedString!]\\n  slug_contains: NonEmptyString\\n  slug_not_contains: NonEmptyString\\n  slug_starts_with: NonEmptyString\\n  slug_not_starts_with: NonEmptyString\\n  slug_ends_with: NonEmptyString\\n  slug_not_ends_with: NonEmptyString\\n  createdAt: DateTime\\n  createdAt_not: DateTime\\n  createdAt_in: [DateTime!]\\n  createdAt_not_in: [DateTime!]\\n  createdAt_gt: DateTime\\n  createdAt_gte: DateTime\\n  createdAt_lt: DateTime\\n  createdAt_lte: DateTime\\n  updatedAt: DateTime\\n  updatedAt_not: DateTime\\n  updatedAt_in: [DateTime!]\\n  updatedAt_not_in: [DateTime!]\\n  updatedAt_gt: DateTime\\n  updatedAt_gte: DateTime\\n  updatedAt_lt: DateTime\\n  updatedAt_lte: DateTime\\n  articles_every: ArticleTagFilterInput\\n  articles_some: ArticleTagFilterInput\\n  articles_none: ArticleTagFilterInput\\n  articleCount: UnsignedInt\\n  articleCount_not: UnsignedInt\\n  articleCount_gt: UnsignedInt\\n  articleCount_gte: UnsignedInt\\n  articleCount_lt: UnsignedInt\\n  articleCount_lte: UnsignedInt\\n  AND: [TagFilterInput]\\n  OR: [TagFilterInput]\\n  NOT: TagFilterInput\\n}\\n\\n\\"\\"\\"\\nA date-time string, such as \\"2007-12-03T10:15:30.123Z\\", compliant with the ISO 8601 extended format.\\n\\"\\"\\"\\nscalar DateTime @specifiedBy(url: \\"https://en.wikipedia.org/wiki/ISO_8601\\")\\n\\n\\"\\"\\"\\nThe \`UnsignedBigInt\` scalar type represents non-fractional unsigned whole numeric values.\\n\\"\\"\\"\\nscalar UnsignedBigInt @specifiedBy(url: \\"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects\\")\\n\\n\\"\\"\\"\\nThe \`UnsignedFloat\` scalar type represents unsigned double-precision fractional values.\\n\\"\\"\\"\\nscalar UnsignedFloat @specifiedBy(url: \\"https://en.wikipedia.org/wiki/IEEE_floating_point\\")\\n\\n\\"\\"\\"The \\"ArticleExtension\\" nodes' filter\\"\\"\\"\\ninput ArticleExtensionFilterInput {\\n  article: ArticleFilterInput\\n  article_not: ArticleFilterInput\\n  source: NonEmptyTrimmedString\\n  source_not: NonEmptyTrimmedString\\n  source_in: [NonEmptyTrimmedString]\\n  source_not_in: [NonEmptyTrimmedString]\\n  source_is_null: Boolean\\n  source_contains: NonEmptyString\\n  source_not_contains: NonEmptyString\\n  source_starts_with: NonEmptyString\\n  source_not_starts_with: NonEmptyString\\n  source_ends_with: NonEmptyString\\n  source_not_ends_with: NonEmptyString\\n  AND: [ArticleExtensionFilterInput]\\n  OR: [ArticleExtensionFilterInput]\\n  NOT: ArticleExtensionFilterInput\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"Article\\" by \\"id\\" or \\"category-slug\\"\\n\\"\\"\\"\\ninput ArticleUniqueFilterInput {\\n  \\"\\"\\"This UUID identifies an Article publicly\\"\\"\\"\\n  id: UUIDv4\\n  category: CategoryUniqueFilterInput\\n  slug: Slug\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"Category\\" by \\"id\\", \\"parent-slug\\" or \\"parent-order\\"\\n\\"\\"\\"\\ninput CategoryUniqueFilterInput {\\n  id: UUIDv4\\n  parent: CategoryUniqueFilterInput\\n  slug: NonEmptyTrimmedString\\n  order: UnsignedInt\\n}\\n\\n\\"\\"\\"\\nRepresents a slug: a string containing only lowercase letters, digits, hyphens and underscores. It cannot start or end with a hyphen or underscore, nor contain consecutive hyphens or underscores.\\n\\"\\"\\"\\nscalar Slug\\n\\n\\"\\"\\"The article is the main resource, written by the journalists\\"\\"\\"\\ntype Article implements PublicNodeInterface {\\n  \\"\\"\\"This UUID identifies an Article publicly\\"\\"\\"\\n  id: UUIDv4!\\n  status: ArticleStatus!\\n  title: NonEmptySanitizedString!\\n  slug: Slug!\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n  category: Category\\n  createdBy: User\\n  createdAt: DateTime!\\n  updatedBy: User\\n  updatedAt: DateTime!\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  views: UnsignedBigInt!\\n  score: UnsignedFloat!\\n  machineTags: JSONArray\\n  tags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!] = [order_ASC], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!\\n\\n  \\"\\"\\"\\n  Number of \\"tags\\"\\n  \\"\\"\\"\\n  tagCount(where: ArticleTagFilterInput): UnsignedInt!\\n  extension: ArticleExtension\\n\\n  \\"\\"\\"A custom field with a dependency\\"\\"\\"\\n  lowerCasedTitle(\\n    \\"\\"\\"Optional, a prefix\\"\\"\\"\\n    prefix: String\\n  ): NonEmptyTrimmedString!\\n\\n  \\"\\"\\"A custom field with a dependency\\"\\"\\"\\n  upperCasedTitle: NonEmptySanitizedString!\\n\\n  \\"\\"\\"A virtual-field depending on other virtual-fields\\"\\"\\"\\n  mixedCasedTitle: NonEmptySanitizedString!\\n  similars(\\n    \\"\\"\\"The number of similar articles to return\\"\\"\\"\\n    first: UnsignedInt!\\n  ): [Article!]!\\n}\\n\\n\\"\\"\\"Exemple of interface\\"\\"\\"\\ninterface PublicNodeInterface {\\n  \\"\\"\\"Every public node have a public id\\"\\"\\"\\n  id: UUIDv4!\\n}\\n\\n\\"\\"\\"\\nA string in which the sequences of whitespaces and control characters are replaced with a single space - the leading whitespaces, trailing whitespaces and control characters are removed. It cannot contain HTML.\\n\\"\\"\\"\\nscalar NonEmptySanitizedString\\n\\n\\"\\"\\"\\nThe DraftJS raw state contains a list of content blocks, as well as a map of all relevant entity objects.\\n\\"\\"\\"\\nscalar DraftJS @specifiedBy(url: \\"https://draftjs.org/docs/api-reference-data-conversion/#convertfromraw\\")\\n\\ntype Category implements PublicNodeInterface {\\n  id: UUIDv4!\\n  title: NonEmptyTrimmedString!\\n  slug: NonEmptyTrimmedString!\\n  parent: Category\\n  order: UnsignedInt!\\n\\n  \\"\\"\\"This category's children\\"\\"\\"\\n  children(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Category!]!\\n\\n  \\"\\"\\"\\n  Number of \\"children\\"\\n  \\"\\"\\"\\n  childCount(where: CategoryFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"The articles attached to this category\\"\\"\\"\\n  articles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"\\n  Number of \\"articles\\"\\n  \\"\\"\\"\\n  articleCount(where: ArticleFilterInput): UnsignedInt!\\n}\\n\\n\\"\\"\\"Order the \\"Category\\" nodes\\"\\"\\"\\nenum CategoryOrderingInput {\\n  \\"\\"\\"from the lowest \\"order\\" to the highest\\"\\"\\"\\n  order_ASC\\n\\n  \\"\\"\\"from the highest \\"order\\" to the lowest\\"\\"\\"\\n  order_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"children\\" to the highest\\"\\"\\"\\n  childCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"children\\" to the lowest\\"\\"\\"\\n  childCount_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"articles\\" to the highest\\"\\"\\"\\n  articleCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"articles\\" to the lowest\\"\\"\\"\\n  articleCount_DESC\\n}\\n\\n\\"\\"\\"Order the \\"Article\\" nodes\\"\\"\\"\\nenum ArticleOrderingInput {\\n  \\"\\"\\"from the lowest \\"createdAt\\" to the highest\\"\\"\\"\\n  createdAt_ASC\\n\\n  \\"\\"\\"from the highest \\"createdAt\\" to the lowest\\"\\"\\"\\n  createdAt_DESC\\n\\n  \\"\\"\\"from the lowest \\"updatedAt\\" to the highest\\"\\"\\"\\n  updatedAt_ASC\\n\\n  \\"\\"\\"from the highest \\"updatedAt\\" to the lowest\\"\\"\\"\\n  updatedAt_DESC\\n\\n  \\"\\"\\"from the lowest \\"views\\" to the highest\\"\\"\\"\\n  views_ASC\\n\\n  \\"\\"\\"from the highest \\"views\\" to the lowest\\"\\"\\"\\n  views_DESC\\n\\n  \\"\\"\\"from the lowest \\"score\\" to the highest\\"\\"\\"\\n  score_ASC\\n\\n  \\"\\"\\"from the highest \\"score\\" to the lowest\\"\\"\\"\\n  score_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"tags\\" to the highest\\"\\"\\"\\n  tagCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"tags\\" to the lowest\\"\\"\\"\\n  tagCount_DESC\\n}\\n\\ntype User implements PublicNodeInterface {\\n  id: UUIDv4!\\n  username: NonEmptyTrimmedString!\\n\\n  \\"\\"\\"All the articles this user has created\\"\\"\\"\\n  createdArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"\\n  Number of \\"createdArticles\\"\\n  \\"\\"\\"\\n  createdArticleCount(where: ArticleFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"All the articles this user has updated\\"\\"\\"\\n  updatedArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"\\n  Number of \\"updatedArticles\\"\\n  \\"\\"\\"\\n  updatedArticleCount(where: ArticleFilterInput): UnsignedInt!\\n\\n  \\"\\"\\"This user's profile, only the optional informations\\"\\"\\"\\n  profile: UserProfile\\n  articleTagModerations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Number of \\"articleTagModerations\\"\\n  \\"\\"\\"\\n  articleTagModerationCount(where: ArticleTagModerationFilterInput): UnsignedInt!\\n}\\n\\ntype UserProfile {\\n  user: User!\\n  birthday: Date\\n  facebookId: ID\\n  googleId: ID\\n  twitterHandle: ID\\n}\\n\\ntype ArticleTagModeration {\\n  articleTag: ArticleTag!\\n  moderator: User!\\n  moderation: NonEmptyTrimmedString\\n}\\n\\ntype ArticleTag {\\n  article: Article!\\n  tag: Tag!\\n  order: UnsignedInt!\\n  moderations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Number of \\"moderations\\"\\n  \\"\\"\\"\\n  moderationCount(where: ArticleTagModerationFilterInput): UnsignedInt!\\n}\\n\\ntype Tag implements PublicNodeInterface {\\n  id: UUIDv4!\\n\\n  \\"\\"\\"A tag can be deprecated\\"\\"\\"\\n  deprecated: Boolean\\n  title: NonEmptyTrimmedString!\\n  slug: NonEmptyTrimmedString!\\n  createdAt: DateTime!\\n  updatedAt: DateTime!\\n  articles(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!\\n\\n  \\"\\"\\"\\n  Number of \\"articles\\"\\n  \\"\\"\\"\\n  articleCount(where: ArticleTagFilterInput): UnsignedInt!\\n}\\n\\n\\"\\"\\"Order the \\"ArticleTag\\" nodes\\"\\"\\"\\nenum ArticleTagOrderingInput {\\n  \\"\\"\\"from the lowest \\"order\\" to the highest\\"\\"\\"\\n  order_ASC\\n\\n  \\"\\"\\"from the highest \\"order\\" to the lowest\\"\\"\\"\\n  order_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"moderations\\" to the highest\\"\\"\\"\\n  moderationCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"moderations\\" to the lowest\\"\\"\\"\\n  moderationCount_DESC\\n}\\n\\n\\"\\"\\"The \`JSONObject\` scalar type represents JSON objects.\\"\\"\\"\\nscalar JSONObject @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")\\n\\n\\"\\"\\"The \`JSONArray\` scalar type represents JSON arrays.\\"\\"\\"\\nscalar JSONArray @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")\\n\\ntype ArticleExtension {\\n  article: Article!\\n\\n  \\"\\"\\"The source of the article\\"\\"\\"\\n  source: NonEmptyTrimmedString\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"ArticleExtension\\" by \\"article\\"\\n\\"\\"\\"\\ninput ArticleExtensionUniqueFilterInput {\\n  article: ArticleUniqueFilterInput!\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"Tag\\" by \\"id\\" or \\"slug\\"\\n\\"\\"\\"\\ninput TagUniqueFilterInput {\\n  id: UUIDv4\\n  slug: NonEmptyTrimmedString\\n}\\n\\n\\"\\"\\"Order the \\"Tag\\" nodes\\"\\"\\"\\nenum TagOrderingInput {\\n  \\"\\"\\"from the lowest \\"createdAt\\" to the highest\\"\\"\\"\\n  createdAt_ASC\\n\\n  \\"\\"\\"from the highest \\"createdAt\\" to the lowest\\"\\"\\"\\n  createdAt_DESC\\n\\n  \\"\\"\\"from the lowest \\"updatedAt\\" to the highest\\"\\"\\"\\n  updatedAt_ASC\\n\\n  \\"\\"\\"from the highest \\"updatedAt\\" to the lowest\\"\\"\\"\\n  updatedAt_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"articles\\" to the highest\\"\\"\\"\\n  articleCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"articles\\" to the lowest\\"\\"\\"\\n  articleCount_DESC\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"ArticleTag\\" by \\"article-tag\\" or \\"article-order\\"\\n\\"\\"\\"\\ninput ArticleTagUniqueFilterInput {\\n  article: ArticleUniqueFilterInput!\\n  tag: TagUniqueFilterInput\\n  order: UnsignedInt\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"ArticleTagModeration\\" by \\"articleTag-moderator\\"\\n\\"\\"\\"\\ninput ArticleTagModerationUniqueFilterInput {\\n  articleTag: ArticleTagUniqueFilterInput!\\n  moderator: UserUniqueFilterInput!\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"User\\" by \\"id\\" or \\"username\\"\\n\\"\\"\\"\\ninput UserUniqueFilterInput {\\n  id: UUIDv4\\n  username: NonEmptyTrimmedString\\n}\\n\\n\\"\\"\\"Order the \\"User\\" nodes\\"\\"\\"\\nenum UserOrderingInput {\\n  \\"\\"\\"from the lowest number of \\"createdArticles\\" to the highest\\"\\"\\"\\n  createdArticleCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"createdArticles\\" to the lowest\\"\\"\\"\\n  createdArticleCount_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"updatedArticles\\" to the highest\\"\\"\\"\\n  updatedArticleCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"updatedArticles\\" to the lowest\\"\\"\\"\\n  updatedArticleCount_DESC\\n\\n  \\"\\"\\"from the lowest number of \\"articleTagModerations\\" to the highest\\"\\"\\"\\n  articleTagModerationCount_ASC\\n\\n  \\"\\"\\"from the highest number of \\"articleTagModerations\\" to the lowest\\"\\"\\"\\n  articleTagModerationCount_DESC\\n}\\n\\n\\"\\"\\"\\nIdentifies exactly one \\"UserProfile\\" by \\"user\\"\\n\\"\\"\\"\\ninput UserProfileUniqueFilterInput {\\n  user: UserUniqueFilterInput!\\n}\\n\\n\\"\\"\\"Order the \\"UserProfile\\" nodes\\"\\"\\"\\nenum UserProfileOrderingInput {\\n  \\"\\"\\"from the lowest \\"birthday\\" to the highest\\"\\"\\"\\n  birthday_ASC\\n\\n  \\"\\"\\"from the highest \\"birthday\\" to the lowest\\"\\"\\"\\n  birthday_DESC\\n}\\n\\ntype mutation {\\n  \\"\\"\\"Creates one \\"Article\\", throws an error if it already exists\\"\\"\\"\\n  createArticle(data: ArticleCreationInput!): Article!\\n\\n  \\"\\"\\"\\n  Creates one \\"Article\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createArticleIfNotExists(where: ArticleUniqueFilterInput!, data: ArticleCreationInput!): Article!\\n\\n  \\"\\"\\"Creates some \\"Article\\", throws an error if they already exist\\"\\"\\"\\n  createArticles(data: [ArticleCreationInput!]!): [Article!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"Articles\\"\\n  \\"\\"\\"\\n  updateArticles(data: ArticleUpdateInput, where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"Updates one \\"Article\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateArticleIfExists(data: ArticleUpdateInput, where: ArticleUniqueFilterInput!): Article\\n\\n  \\"\\"\\"Updates one \\"Article\\", throws an error if it does not exists\\"\\"\\"\\n  updateArticle(data: ArticleUpdateInput, where: ArticleUniqueFilterInput!): Article!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Articles\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeArticlesInOrderIfExists(\\n    data: ArticleUpdateInput\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Articles\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeArticlesInOrder(\\n    data: ArticleUpdateInput\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"Articles\\"\\n  \\"\\"\\"\\n  deleteArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], first: UnsignedInt!): [Article!]!\\n\\n  \\"\\"\\"Deletes one \\"Article\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteArticleIfExists(where: ArticleUniqueFilterInput!): Article\\n\\n  \\"\\"\\"Deletes one \\"Article\\", throws an error if it does not exists\\"\\"\\"\\n  deleteArticle(where: ArticleUniqueFilterInput!): Article!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Articles\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeArticlesInOrderIfExists(\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Articles\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeArticlesInOrder(\\n    where: [ArticleUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleFilterInput\\n  ): [Article!]!\\n\\n  \\"\\"\\"Updates an existing \\"Article\\" or creates a new one\\"\\"\\"\\n  upsertArticle(where: ArticleUniqueFilterInput!, create: ArticleCreationInput!, update: ArticleUpdateInput): Article!\\n\\n  \\"\\"\\"Custom deletion\\"\\"\\"\\n  customDeletionArticles: UnsignedInt\\n\\n  \\"\\"\\"Creates one \\"ArticleExtension\\", throws an error if it already exists\\"\\"\\"\\n  createArticleExtension(data: ArticleExtensionCreationInput!): ArticleExtension!\\n\\n  \\"\\"\\"\\n  Creates one \\"ArticleExtension\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createArticleExtensionIfNotExists(where: ArticleExtensionUniqueFilterInput!, data: ArticleExtensionCreationInput!): ArticleExtension!\\n\\n  \\"\\"\\"Creates some \\"ArticleExtension\\", throws an error if they already exist\\"\\"\\"\\n  createArticleExtensions(data: [ArticleExtensionCreationInput!]!): [ArticleExtension!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"ArticleExtensions\\"\\n  \\"\\"\\"\\n  updateArticleExtensions(data: ArticleExtensionUpdateInput, where: ArticleExtensionFilterInput, first: UnsignedInt!): [ArticleExtension!]!\\n\\n  \\"\\"\\"Updates one \\"ArticleExtension\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateArticleExtensionIfExists(data: ArticleExtensionUpdateInput, where: ArticleExtensionUniqueFilterInput!): ArticleExtension\\n\\n  \\"\\"\\"Updates one \\"ArticleExtension\\", throws an error if it does not exists\\"\\"\\"\\n  updateArticleExtension(data: ArticleExtensionUpdateInput, where: ArticleExtensionUniqueFilterInput!): ArticleExtension!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleExtensions\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeArticleExtensionsInOrderIfExists(\\n    data: ArticleExtensionUpdateInput\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleExtensions\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeArticleExtensionsInOrder(\\n    data: ArticleExtensionUpdateInput\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"ArticleExtensions\\"\\n  \\"\\"\\"\\n  deleteArticleExtensions(where: ArticleExtensionFilterInput, first: UnsignedInt!): [ArticleExtension!]!\\n\\n  \\"\\"\\"Deletes one \\"ArticleExtension\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteArticleExtensionIfExists(where: ArticleExtensionUniqueFilterInput!): ArticleExtension\\n\\n  \\"\\"\\"Deletes one \\"ArticleExtension\\", throws an error if it does not exists\\"\\"\\"\\n  deleteArticleExtension(where: ArticleExtensionUniqueFilterInput!): ArticleExtension!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleExtensions\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeArticleExtensionsInOrderIfExists(\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleExtensions\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeArticleExtensionsInOrder(\\n    where: [ArticleExtensionUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleExtensionFilterInput\\n  ): [ArticleExtension!]!\\n\\n  \\"\\"\\"Updates an existing \\"ArticleExtension\\" or creates a new one\\"\\"\\"\\n  upsertArticleExtension(where: ArticleExtensionUniqueFilterInput!, create: ArticleExtensionCreationInput!, update: ArticleExtensionUpdateInput): ArticleExtension!\\n\\n  \\"\\"\\"Creates one \\"Category\\", throws an error if it already exists\\"\\"\\"\\n  createCategory(data: CategoryCreationInput!): Category!\\n\\n  \\"\\"\\"\\n  Creates one \\"Category\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createCategoryIfNotExists(where: CategoryUniqueFilterInput!, data: CategoryCreationInput!): Category!\\n\\n  \\"\\"\\"Creates some \\"Category\\", throws an error if they already exist\\"\\"\\"\\n  createCategories(data: [CategoryCreationInput!]!): [Category!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"Categories\\"\\n  \\"\\"\\"\\n  updateCategories(data: CategoryUpdateInput, where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], first: UnsignedInt!): [Category!]!\\n\\n  \\"\\"\\"Updates one \\"Category\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateCategoryIfExists(data: CategoryUpdateInput, where: CategoryUniqueFilterInput!): Category\\n\\n  \\"\\"\\"Updates one \\"Category\\", throws an error if it does not exists\\"\\"\\"\\n  updateCategory(data: CategoryUpdateInput, where: CategoryUniqueFilterInput!): Category!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Categories\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeCategoriesInOrderIfExists(\\n    data: CategoryUpdateInput\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Categories\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeCategoriesInOrder(\\n    data: CategoryUpdateInput\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"Categories\\"\\n  \\"\\"\\"\\n  deleteCategories(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], first: UnsignedInt!): [Category!]!\\n\\n  \\"\\"\\"Deletes one \\"Category\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteCategoryIfExists(where: CategoryUniqueFilterInput!): Category\\n\\n  \\"\\"\\"Deletes one \\"Category\\", throws an error if it does not exists\\"\\"\\"\\n  deleteCategory(where: CategoryUniqueFilterInput!): Category!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Categories\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeCategoriesInOrderIfExists(\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Categories\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeCategoriesInOrder(\\n    where: [CategoryUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: CategoryFilterInput\\n  ): [Category!]!\\n\\n  \\"\\"\\"Updates an existing \\"Category\\" or creates a new one\\"\\"\\"\\n  upsertCategory(where: CategoryUniqueFilterInput!, create: CategoryCreationInput!, update: CategoryUpdateInput): Category!\\n\\n  \\"\\"\\"Creates one \\"Tag\\", throws an error if it already exists\\"\\"\\"\\n  createTag(data: TagCreationInput!): Tag!\\n\\n  \\"\\"\\"Creates one \\"Tag\\" if it does not exist, returns the existing otherwise\\"\\"\\"\\n  createTagIfNotExists(where: TagUniqueFilterInput!, data: TagCreationInput!): Tag!\\n\\n  \\"\\"\\"Creates some \\"Tag\\", throws an error if they already exist\\"\\"\\"\\n  createTags(data: [TagCreationInput!]!): [Tag!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"Tags\\"\\n  \\"\\"\\"\\n  updateTags(data: TagUpdateInput, where: TagFilterInput, orderBy: [TagOrderingInput!], first: UnsignedInt!): [Tag!]!\\n\\n  \\"\\"\\"Updates one \\"Tag\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateTagIfExists(data: TagUpdateInput, where: TagUniqueFilterInput!): Tag\\n\\n  \\"\\"\\"Updates one \\"Tag\\", throws an error if it does not exists\\"\\"\\"\\n  updateTag(data: TagUpdateInput, where: TagUniqueFilterInput!): Tag!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Tags\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeTagsInOrderIfExists(\\n    data: TagUpdateInput\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"Tags\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeTagsInOrder(\\n    data: TagUpdateInput\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"Tags\\"\\n  \\"\\"\\"\\n  deleteTags(where: TagFilterInput, orderBy: [TagOrderingInput!], first: UnsignedInt!): [Tag!]!\\n\\n  \\"\\"\\"Deletes one \\"Tag\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteTagIfExists(where: TagUniqueFilterInput!): Tag\\n\\n  \\"\\"\\"Deletes one \\"Tag\\", throws an error if it does not exists\\"\\"\\"\\n  deleteTag(where: TagUniqueFilterInput!): Tag!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Tags\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeTagsInOrderIfExists(\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"Tags\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeTagsInOrder(\\n    where: [TagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: TagFilterInput\\n  ): [Tag!]!\\n\\n  \\"\\"\\"Updates an existing \\"Tag\\" or creates a new one\\"\\"\\"\\n  upsertTag(where: TagUniqueFilterInput!, create: TagCreationInput!, update: TagUpdateInput): Tag!\\n\\n  \\"\\"\\"Creates one \\"ArticleTag\\", throws an error if it already exists\\"\\"\\"\\n  createArticleTag(data: ArticleTagCreationInput!): ArticleTag!\\n\\n  \\"\\"\\"\\n  Creates one \\"ArticleTag\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createArticleTagIfNotExists(where: ArticleTagUniqueFilterInput!, data: ArticleTagCreationInput!): ArticleTag!\\n\\n  \\"\\"\\"Creates some \\"ArticleTag\\", throws an error if they already exist\\"\\"\\"\\n  createArticleTags(data: [ArticleTagCreationInput!]!): [ArticleTag!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"ArticleTags\\"\\n  \\"\\"\\"\\n  updateArticleTags(data: ArticleTagUpdateInput, where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], first: UnsignedInt!): [ArticleTag!]!\\n\\n  \\"\\"\\"Updates one \\"ArticleTag\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateArticleTagIfExists(data: ArticleTagUpdateInput, where: ArticleTagUniqueFilterInput!): ArticleTag\\n\\n  \\"\\"\\"Updates one \\"ArticleTag\\", throws an error if it does not exists\\"\\"\\"\\n  updateArticleTag(data: ArticleTagUpdateInput, where: ArticleTagUniqueFilterInput!): ArticleTag!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleTags\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeArticleTagsInOrderIfExists(\\n    data: ArticleTagUpdateInput\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleTags\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeArticleTagsInOrder(\\n    data: ArticleTagUpdateInput\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"ArticleTags\\"\\n  \\"\\"\\"\\n  deleteArticleTags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], first: UnsignedInt!): [ArticleTag!]!\\n\\n  \\"\\"\\"Deletes one \\"ArticleTag\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteArticleTagIfExists(where: ArticleTagUniqueFilterInput!): ArticleTag\\n\\n  \\"\\"\\"Deletes one \\"ArticleTag\\", throws an error if it does not exists\\"\\"\\"\\n  deleteArticleTag(where: ArticleTagUniqueFilterInput!): ArticleTag!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleTags\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeArticleTagsInOrderIfExists(\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleTags\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeArticleTagsInOrder(\\n    where: [ArticleTagUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagFilterInput\\n  ): [ArticleTag!]!\\n\\n  \\"\\"\\"Updates an existing \\"ArticleTag\\" or creates a new one\\"\\"\\"\\n  upsertArticleTag(where: ArticleTagUniqueFilterInput!, create: ArticleTagCreationInput!, update: ArticleTagUpdateInput): ArticleTag!\\n\\n  \\"\\"\\"\\n  Creates one \\"ArticleTagModeration\\", throws an error if it already exists\\n  \\"\\"\\"\\n  createArticleTagModeration(data: ArticleTagModerationCreationInput!): ArticleTagModeration!\\n\\n  \\"\\"\\"\\n  Creates one \\"ArticleTagModeration\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createArticleTagModerationIfNotExists(where: ArticleTagModerationUniqueFilterInput!, data: ArticleTagModerationCreationInput!): ArticleTagModeration!\\n\\n  \\"\\"\\"\\n  Creates some \\"ArticleTagModeration\\", throws an error if they already exist\\n  \\"\\"\\"\\n  createArticleTagModerations(data: [ArticleTagModerationCreationInput!]!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"ArticleTagModerations\\"\\n  \\"\\"\\"\\n  updateArticleTagModerations(data: ArticleTagModerationUpdateInput, where: ArticleTagModerationFilterInput, first: UnsignedInt!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Updates one \\"ArticleTagModeration\\" if it exists, returns null otherwise\\n  \\"\\"\\"\\n  updateArticleTagModerationIfExists(data: ArticleTagModerationUpdateInput, where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration\\n\\n  \\"\\"\\"\\n  Updates one \\"ArticleTagModeration\\", throws an error if it does not exists\\n  \\"\\"\\"\\n  updateArticleTagModeration(data: ArticleTagModerationUpdateInput, where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleTagModerations\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeArticleTagModerationsInOrderIfExists(\\n    data: ArticleTagModerationUpdateInput\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"ArticleTagModerations\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeArticleTagModerationsInOrder(\\n    data: ArticleTagModerationUpdateInput\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"ArticleTagModerations\\"\\n  \\"\\"\\"\\n  deleteArticleTagModerations(where: ArticleTagModerationFilterInput, first: UnsignedInt!): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"\\n  Deletes one \\"ArticleTagModeration\\" if it exists, returns null otherwise\\n  \\"\\"\\"\\n  deleteArticleTagModerationIfExists(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration\\n\\n  \\"\\"\\"\\n  Deletes one \\"ArticleTagModeration\\", throws an error if it does not exists\\n  \\"\\"\\"\\n  deleteArticleTagModeration(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleTagModerations\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeArticleTagModerationsInOrderIfExists(\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"ArticleTagModerations\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeArticleTagModerationsInOrder(\\n    where: [ArticleTagModerationUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: ArticleTagModerationFilterInput\\n  ): [ArticleTagModeration!]!\\n\\n  \\"\\"\\"Updates an existing \\"ArticleTagModeration\\" or creates a new one\\"\\"\\"\\n  upsertArticleTagModeration(where: ArticleTagModerationUniqueFilterInput!, create: ArticleTagModerationCreationInput!, update: ArticleTagModerationUpdateInput): ArticleTagModeration!\\n\\n  \\"\\"\\"Creates one \\"UserProfile\\", throws an error if it already exists\\"\\"\\"\\n  createUserProfile(data: UserProfileCreationInput!): UserProfile!\\n\\n  \\"\\"\\"\\n  Creates one \\"UserProfile\\" if it does not exist, returns the existing otherwise\\n  \\"\\"\\"\\n  createUserProfileIfNotExists(where: UserProfileUniqueFilterInput!, data: UserProfileCreationInput!): UserProfile!\\n\\n  \\"\\"\\"Creates some \\"UserProfile\\", throws an error if they already exist\\"\\"\\"\\n  createUserProfiles(data: [UserProfileCreationInput!]!): [UserProfile!]!\\n\\n  \\"\\"\\"\\n  Updates many \\"UserProfiles\\"\\n  \\"\\"\\"\\n  updateUserProfiles(data: UserProfileUpdateInput, where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], first: UnsignedInt!): [UserProfile!]!\\n\\n  \\"\\"\\"Updates one \\"UserProfile\\" if it exists, returns null otherwise\\"\\"\\"\\n  updateUserProfileIfExists(data: UserProfileUpdateInput, where: UserProfileUniqueFilterInput!): UserProfile\\n\\n  \\"\\"\\"Updates one \\"UserProfile\\", throws an error if it does not exists\\"\\"\\"\\n  updateUserProfile(data: UserProfileUpdateInput, where: UserProfileUniqueFilterInput!): UserProfile!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"UserProfiles\\" then returns their new values, or null, in the same order\\n  \\"\\"\\"\\n  updateSomeUserProfilesInOrderIfExists(\\n    data: UserProfileUpdateInput\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, updates the corresponding \\"UserProfiles\\" then returns their new values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  updateSomeUserProfilesInOrder(\\n    data: UserProfileUpdateInput\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile!]!\\n\\n  \\"\\"\\"\\n  Deletes many \\"UserProfiles\\"\\n  \\"\\"\\"\\n  deleteUserProfiles(where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], first: UnsignedInt!): [UserProfile!]!\\n\\n  \\"\\"\\"Deletes one \\"UserProfile\\" if it exists, returns null otherwise\\"\\"\\"\\n  deleteUserProfileIfExists(where: UserProfileUniqueFilterInput!): UserProfile\\n\\n  \\"\\"\\"Deletes one \\"UserProfile\\", throws an error if it does not exists\\"\\"\\"\\n  deleteUserProfile(where: UserProfileUniqueFilterInput!): UserProfile!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"UserProfiles\\" then returns their old values, or null, in the same order\\n  \\"\\"\\"\\n  deleteSomeUserProfilesInOrderIfExists(\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile]!\\n\\n  \\"\\"\\"\\n  Given a list of unique-filter's value, deletes the corresponding \\"UserProfiles\\" then returns their old values in the same order, throws an error if one does not exist\\n  \\"\\"\\"\\n  deleteSomeUserProfilesInOrder(\\n    where: [UserProfileUniqueFilterInput!]!\\n\\n    \\"\\"\\"\\n    It is possible to provide a filter in order to perform this operation in a subset of the documents\\n    \\"\\"\\"\\n    subset: UserProfileFilterInput\\n  ): [UserProfile!]!\\n\\n  \\"\\"\\"Updates an existing \\"UserProfile\\" or creates a new one\\"\\"\\"\\n  upsertUserProfile(where: UserProfileUniqueFilterInput!, create: UserProfileCreationInput!, update: UserProfileUpdateInput): UserProfile!\\n}\\n\\n\\"\\"\\"The \\"Article\\" node's creation\\"\\"\\"\\ninput ArticleCreationInput {\\n  \\"\\"\\"You can either provide an UUID or let one be generated for you\\"\\"\\"\\n  id: UUIDv4\\n  status: ArticleStatus! = DRAFT\\n  title: NonEmptySanitizedString!\\n\\n  \\"\\"\\"You can either provide a slug or let the title be \\"slugified\\" for you\\"\\"\\"\\n  slug: Slug\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n  category: ArticleCreationCategoryInput\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  machineTags: JSONArray\\n  tags: ArticleCreationTagsInput\\n  extension: ArticleCreationExtensionInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput ArticleCreationCategoryInput {\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to a new \\"Article\\" through the \\"Article.category\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to a new \\"Article\\" through the \\"Article.category\\" edge, if it exists.\\n  \\"\\"\\"\\n  connectIfExists: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" and connect it to a new \\"Article\\" through the \\"Article.category\\" edge.\\n  \\"\\"\\"\\n  create: CategoryCreationInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" if it does not exist, and connect it to a new \\"Article\\" through the \\"Article.category\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleCreationCategoryCreateIfNotExistsInput\\n}\\n\\n\\"\\"\\"The \\"Category\\" node's creation\\"\\"\\"\\ninput CategoryCreationInput {\\n  \\"\\"\\"You can either provide an UUID or let one be generated for you\\"\\"\\"\\n  id: UUIDv4\\n  title: NonEmptyTrimmedString!\\n\\n  \\"\\"\\"You can either provide a slug or let the title be \\"slugified\\" for you\\"\\"\\"\\n  slug: NonEmptyTrimmedString\\n  parent: CategoryCreationParentInput\\n  order: UnsignedInt!\\n\\n  \\"\\"\\"This category's children\\"\\"\\"\\n  children: CategoryCreationChildrenInput\\n\\n  \\"\\"\\"The articles attached to this category\\"\\"\\"\\n  articles: CategoryCreationArticlesInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput CategoryCreationParentInput {\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to a new \\"Category\\" through the \\"Category.parent\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to a new \\"Category\\" through the \\"Category.parent\\" edge, if it exists.\\n  \\"\\"\\"\\n  connectIfExists: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" and connect it to a new \\"Category\\" through the \\"Category.parent\\" edge.\\n  \\"\\"\\"\\n  create: CategoryCreationInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" if it does not exist, and connect it to a new \\"Category\\" through the \\"Category.parent\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: CategoryCreationParentCreateIfNotExistsInput\\n}\\n\\ninput CategoryCreationParentCreateIfNotExistsInput {\\n  where: CategoryUniqueFilterInput!\\n  data: CategoryCreationInput!\\n}\\n\\ninput CategoryCreationChildrenInput {\\n  create: [CategoryCreationWithoutParentInput!]\\n}\\n\\n\\"\\"\\"The \\"Category\\" node's creation\\"\\"\\"\\ninput CategoryCreationWithoutParentInput {\\n  \\"\\"\\"You can either provide an UUID or let one be generated for you\\"\\"\\"\\n  id: UUIDv4\\n  title: NonEmptyTrimmedString!\\n\\n  \\"\\"\\"You can either provide a slug or let the title be \\"slugified\\" for you\\"\\"\\"\\n  slug: NonEmptyTrimmedString\\n  order: UnsignedInt!\\n\\n  \\"\\"\\"This category's children\\"\\"\\"\\n  children: CategoryCreationChildrenInput\\n\\n  \\"\\"\\"The articles attached to this category\\"\\"\\"\\n  articles: CategoryCreationArticlesInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput CategoryCreationArticlesInput {\\n  create: [ArticleCreationWithoutCategoryInput!]\\n}\\n\\n\\"\\"\\"The \\"Article\\" node's creation\\"\\"\\"\\ninput ArticleCreationWithoutCategoryInput {\\n  \\"\\"\\"You can either provide an UUID or let one be generated for you\\"\\"\\"\\n  id: UUIDv4\\n  status: ArticleStatus! = DRAFT\\n  title: NonEmptySanitizedString!\\n\\n  \\"\\"\\"You can either provide a slug or let the title be \\"slugified\\" for you\\"\\"\\"\\n  slug: Slug\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  machineTags: JSONArray\\n  tags: ArticleCreationTagsInput\\n  extension: ArticleCreationExtensionInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput ArticleCreationTagsInput {\\n  create: [ArticleTagCreationWithoutArticleInput!]\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's creation\\"\\"\\"\\ninput ArticleTagCreationWithoutArticleInput {\\n  tag: ArticleTagCreationTagInput!\\n  order: UnsignedInt!\\n  moderations: ArticleTagCreationModerationsInput\\n}\\n\\ninput ArticleTagCreationTagInput {\\n  \\"\\"\\"\\n  Connect a \\"Tag\\" to a new \\"ArticleTag\\" through the \\"ArticleTag.tag\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: TagUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create a \\"Tag\\" and connect it to a new \\"ArticleTag\\" through the \\"ArticleTag.tag\\" edge.\\n  \\"\\"\\"\\n  create: TagCreationInput\\n\\n  \\"\\"\\"\\n  Create a \\"Tag\\" if it does not exist, and connect it to a new \\"ArticleTag\\" through the \\"ArticleTag.tag\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleTagCreationTagCreateIfNotExistsInput\\n}\\n\\n\\"\\"\\"The \\"Tag\\" node's creation\\"\\"\\"\\ninput TagCreationInput {\\n  \\"\\"\\"You can either provide an UUID or let one be generated for you\\"\\"\\"\\n  id: UUIDv4\\n\\n  \\"\\"\\"A tag can be deprecated\\"\\"\\"\\n  deprecated: Boolean\\n  title: NonEmptyTrimmedString!\\n\\n  \\"\\"\\"You can either provide a slug or let the title be \\"slugified\\" for you\\"\\"\\"\\n  slug: NonEmptyTrimmedString\\n  articles: TagCreationArticlesInput\\n}\\n\\ninput TagCreationArticlesInput {\\n  create: [ArticleTagCreationWithoutTagInput!]\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's creation\\"\\"\\"\\ninput ArticleTagCreationWithoutTagInput {\\n  article: ArticleTagCreationArticleInput!\\n  order: UnsignedInt!\\n  moderations: ArticleTagCreationModerationsInput\\n}\\n\\ninput ArticleTagCreationArticleInput {\\n  \\"\\"\\"\\n  Connect an \\"Article\\" to a new \\"ArticleTag\\" through the \\"ArticleTag.article\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: ArticleUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create an \\"Article\\" and connect it to a new \\"ArticleTag\\" through the \\"ArticleTag.article\\" edge.\\n  \\"\\"\\"\\n  create: ArticleCreationInput\\n\\n  \\"\\"\\"\\n  Create an \\"Article\\" if it does not exist, and connect it to a new \\"ArticleTag\\" through the \\"ArticleTag.article\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleTagCreationArticleCreateIfNotExistsInput\\n}\\n\\ninput ArticleTagCreationArticleCreateIfNotExistsInput {\\n  where: ArticleUniqueFilterInput!\\n  data: ArticleCreationInput!\\n}\\n\\ninput ArticleTagCreationModerationsInput {\\n  create: [ArticleTagModerationCreationWithoutArticleTagInput!]\\n}\\n\\n\\"\\"\\"The \\"ArticleTagModeration\\" node's creation\\"\\"\\"\\ninput ArticleTagModerationCreationWithoutArticleTagInput {\\n  moderator: ArticleTagModerationCreationModeratorInput!\\n  moderation: NonEmptyTrimmedString\\n}\\n\\ninput ArticleTagModerationCreationModeratorInput {\\n  \\"\\"\\"\\n  Connect a \\"User\\" to a new \\"ArticleTagModeration\\" through the \\"ArticleTagModeration.moderator\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: UserUniqueFilterInput\\n}\\n\\ninput ArticleTagCreationTagCreateIfNotExistsInput {\\n  where: TagUniqueFilterInput!\\n  data: TagCreationInput!\\n}\\n\\ninput ArticleCreationExtensionInput {\\n  create: ArticleExtensionCreationWithoutArticleInput\\n}\\n\\n\\"\\"\\"The \\"ArticleExtension\\" node's creation\\"\\"\\"\\ninput ArticleExtensionCreationWithoutArticleInput {\\n  \\"\\"\\"The source of the article\\"\\"\\"\\n  source: NonEmptyTrimmedString\\n}\\n\\ninput ArticleCreationCategoryCreateIfNotExistsInput {\\n  where: CategoryUniqueFilterInput!\\n  data: CategoryCreationInput!\\n}\\n\\n\\"\\"\\"The \\"Article\\" node's update\\"\\"\\"\\ninput ArticleUpdateInput {\\n  status: ArticleStatus\\n  title: NonEmptySanitizedString\\n  slug: Slug\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n  category: ArticleUpdateCategoryInput\\n  updatedBy: ArticleUpdateUpdatedByInput\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  views: UnsignedBigInt\\n  score: UnsignedFloat\\n  machineTags: JSONArray\\n  tags: ArticleUpdateTagsInput\\n  extension: ArticleUpdateExtensionInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput ArticleUpdateCategoryInput {\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to an existing \\"Article\\" through the \\"Article.category\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to an existing \\"Article\\" through the \\"Article.category\\" edge, if it exists.\\n  \\"\\"\\"\\n  connectIfExists: CategoryUniqueFilterInput\\n  disconnect: Boolean\\n  disconnectIfExists: Boolean\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" and connect it to an existing \\"Article\\" through the \\"Article.category\\" edge.\\n  \\"\\"\\"\\n  create: CategoryCreationInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" if it does not exist, and connect it to an existing \\"Article\\" through the \\"Article.category\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleUpdateCategoryCreateIfNotExistsInput\\n\\n  \\"\\"\\"\\n  Update the connected \\"Category\\", throw an error if the \\"Article.category\\" edge does not exist.\\n  \\"\\"\\"\\n  update: CategoryUpdateInput\\n\\n  \\"\\"\\"\\n  Update the connected \\"Category\\", if the \\"Article.category\\" edge exists.\\n  \\"\\"\\"\\n  updateIfExists: CategoryUpdateInput\\n}\\n\\ninput ArticleUpdateCategoryCreateIfNotExistsInput {\\n  where: CategoryUniqueFilterInput!\\n  data: CategoryCreationInput!\\n}\\n\\n\\"\\"\\"The \\"Category\\" node's update\\"\\"\\"\\ninput CategoryUpdateInput {\\n  parent: CategoryUpdateParentInput\\n  order: UnsignedInt\\n\\n  \\"\\"\\"This category's children\\"\\"\\"\\n  children: CategoryUpdateChildrenInput\\n\\n  \\"\\"\\"The articles attached to this category\\"\\"\\"\\n  articles: CategoryUpdateArticlesInput\\n}\\n\\ninput CategoryUpdateParentInput {\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to an existing \\"Category\\" through the \\"Category.parent\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: CategoryUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Connect a \\"Category\\" to an existing \\"Category\\" through the \\"Category.parent\\" edge, if it exists.\\n  \\"\\"\\"\\n  connectIfExists: CategoryUniqueFilterInput\\n  disconnect: Boolean\\n  disconnectIfExists: Boolean\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" and connect it to an existing \\"Category\\" through the \\"Category.parent\\" edge.\\n  \\"\\"\\"\\n  create: CategoryCreationInput\\n\\n  \\"\\"\\"\\n  Create a \\"Category\\" if it does not exist, and connect it to an existing \\"Category\\" through the \\"Category.parent\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: CategoryUpdateParentCreateIfNotExistsInput\\n\\n  \\"\\"\\"\\n  Update the connected \\"Category\\", throw an error if the \\"Category.parent\\" edge does not exist.\\n  \\"\\"\\"\\n  update: CategoryUpdateInput\\n\\n  \\"\\"\\"Update the connected \\"Category\\", if the \\"Category.parent\\" edge exists.\\"\\"\\"\\n  updateIfExists: CategoryUpdateInput\\n}\\n\\ninput CategoryUpdateParentCreateIfNotExistsInput {\\n  where: CategoryUniqueFilterInput!\\n  data: CategoryCreationInput!\\n}\\n\\ninput CategoryUpdateChildrenInput {\\n  deleteAll: Boolean\\n  deleteMany: CategoryFilterInput\\n  delete: [CategoryUniqueFilterWithoutParentInput!]\\n  deleteIfExists: [CategoryUniqueFilterWithoutParentInput!]\\n  create: [CategoryCreationWithoutParentInput!]\\n  createIfNotExists: [CategoryUpdateChildrenCreateIfNotExistsInput!]\\n  updateAll: CategoryUpdateWithoutParentInput\\n  updateMany: [CategoryUpdateChildrenUpdateManyInput!]\\n  update: [CategoryUpdateChildrenUpdateInput!]\\n  updateIfExists: [CategoryUpdateChildrenUpdateIfExistsInput!]\\n  upsert: [CategoryUpdateChildrenUpsertInput!]\\n}\\n\\n\\"\\"\\"\\nGiven a \\"parent\\", identifies exactly one \\"Category\\" by \\"slug\\" or \\"order\\"\\n\\"\\"\\"\\ninput CategoryUniqueFilterWithoutParentInput {\\n  slug: NonEmptyTrimmedString\\n  order: UnsignedInt\\n}\\n\\ninput CategoryUpdateChildrenCreateIfNotExistsInput {\\n  where: CategoryUniqueFilterWithoutParentInput!\\n  data: CategoryCreationWithoutParentInput!\\n}\\n\\n\\"\\"\\"The \\"Category\\" node's update\\"\\"\\"\\ninput CategoryUpdateWithoutParentInput {\\n  order: UnsignedInt\\n\\n  \\"\\"\\"This category's children\\"\\"\\"\\n  children: CategoryUpdateChildrenInput\\n\\n  \\"\\"\\"The articles attached to this category\\"\\"\\"\\n  articles: CategoryUpdateArticlesInput\\n}\\n\\ninput CategoryUpdateArticlesInput {\\n  deleteAll: Boolean\\n  deleteMany: ArticleFilterInput\\n  delete: [ArticleUniqueFilterWithoutCategoryInput!]\\n  deleteIfExists: [ArticleUniqueFilterWithoutCategoryInput!]\\n  create: [ArticleCreationWithoutCategoryInput!]\\n  createIfNotExists: [CategoryUpdateArticlesCreateIfNotExistsInput!]\\n  updateAll: ArticleUpdateWithoutCategoryInput\\n  updateMany: [CategoryUpdateArticlesUpdateManyInput!]\\n  update: [CategoryUpdateArticlesUpdateInput!]\\n  updateIfExists: [CategoryUpdateArticlesUpdateIfExistsInput!]\\n  upsert: [CategoryUpdateArticlesUpsertInput!]\\n}\\n\\n\\"\\"\\"\\nGiven a \\"category\\", identifies exactly one \\"Article\\" by \\"slug\\"\\n\\"\\"\\"\\ninput ArticleUniqueFilterWithoutCategoryInput {\\n  slug: Slug!\\n}\\n\\ninput CategoryUpdateArticlesCreateIfNotExistsInput {\\n  where: ArticleUniqueFilterWithoutCategoryInput!\\n  data: ArticleCreationWithoutCategoryInput!\\n}\\n\\n\\"\\"\\"The \\"Article\\" node's update\\"\\"\\"\\ninput ArticleUpdateWithoutCategoryInput {\\n  status: ArticleStatus\\n  title: NonEmptySanitizedString\\n  slug: Slug\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n  updatedBy: ArticleUpdateUpdatedByInput\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  views: UnsignedBigInt\\n  score: UnsignedFloat\\n  machineTags: JSONArray\\n  tags: ArticleUpdateTagsInput\\n  extension: ArticleUpdateExtensionInput\\n\\n  \\"\\"\\"It is possible to provide the article's body as raw HTML\\"\\"\\"\\n  htmlBody: String\\n}\\n\\ninput ArticleUpdateUpdatedByInput {\\n  \\"\\"\\"\\n  Connect a \\"User\\" to an existing \\"Article\\" through the \\"Article.updatedBy\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: UserUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Connect a \\"User\\" to an existing \\"Article\\" through the \\"Article.updatedBy\\" edge, if it exists.\\n  \\"\\"\\"\\n  connectIfExists: UserUniqueFilterInput\\n  disconnect: Boolean\\n  disconnectIfExists: Boolean\\n}\\n\\ninput ArticleUpdateTagsInput {\\n  deleteAll: Boolean\\n  deleteMany: ArticleTagFilterInput\\n  delete: [ArticleTagUniqueFilterWithoutArticleInput!]\\n  deleteIfExists: [ArticleTagUniqueFilterWithoutArticleInput!]\\n  create: [ArticleTagCreationWithoutArticleInput!]\\n  createIfNotExists: [ArticleUpdateTagsCreateIfNotExistsInput!]\\n  updateAll: ArticleTagUpdateWithoutArticleInput\\n  updateMany: [ArticleUpdateTagsUpdateManyInput!]\\n  update: [ArticleUpdateTagsUpdateInput!]\\n  updateIfExists: [ArticleUpdateTagsUpdateIfExistsInput!]\\n  upsert: [ArticleUpdateTagsUpsertInput!]\\n}\\n\\n\\"\\"\\"\\nGiven an \\"article\\", identifies exactly one \\"ArticleTag\\" by \\"tag\\" or \\"order\\"\\n\\"\\"\\"\\ninput ArticleTagUniqueFilterWithoutArticleInput {\\n  tag: TagUniqueFilterInput\\n  order: UnsignedInt\\n}\\n\\ninput ArticleUpdateTagsCreateIfNotExistsInput {\\n  where: ArticleTagUniqueFilterWithoutArticleInput!\\n  data: ArticleTagCreationWithoutArticleInput!\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's update\\"\\"\\"\\ninput ArticleTagUpdateWithoutArticleInput {\\n  order: UnsignedInt\\n  moderations: ArticleTagUpdateModerationsInput\\n}\\n\\ninput ArticleTagUpdateModerationsInput {\\n  deleteAll: Boolean\\n  deleteMany: ArticleTagModerationFilterInput\\n  delete: [ArticleTagModerationUniqueFilterWithoutArticleTagInput!]\\n  deleteIfExists: [ArticleTagModerationUniqueFilterWithoutArticleTagInput!]\\n  create: [ArticleTagModerationCreationWithoutArticleTagInput!]\\n  createIfNotExists: [ArticleTagUpdateModerationsCreateIfNotExistsInput!]\\n  updateAll: ArticleTagModerationUpdateWithoutArticleTagInput\\n  updateMany: [ArticleTagUpdateModerationsUpdateManyInput!]\\n  update: [ArticleTagUpdateModerationsUpdateInput!]\\n  updateIfExists: [ArticleTagUpdateModerationsUpdateIfExistsInput!]\\n  upsert: [ArticleTagUpdateModerationsUpsertInput!]\\n}\\n\\n\\"\\"\\"\\nGiven an \\"articleTag\\", identifies exactly one \\"ArticleTagModeration\\" by \\"moderator\\"\\n\\"\\"\\"\\ninput ArticleTagModerationUniqueFilterWithoutArticleTagInput {\\n  moderator: UserUniqueFilterInput!\\n}\\n\\ninput ArticleTagUpdateModerationsCreateIfNotExistsInput {\\n  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!\\n  data: ArticleTagModerationCreationWithoutArticleTagInput!\\n}\\n\\n\\"\\"\\"The \\"ArticleTagModeration\\" node's update\\"\\"\\"\\ninput ArticleTagModerationUpdateWithoutArticleTagInput {\\n  moderation: NonEmptyTrimmedString\\n}\\n\\ninput ArticleTagUpdateModerationsUpdateManyInput {\\n  where: ArticleTagModerationFilterInput\\n  data: ArticleTagModerationUpdateWithoutArticleTagInput\\n}\\n\\ninput ArticleTagUpdateModerationsUpdateInput {\\n  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!\\n  data: ArticleTagModerationUpdateWithoutArticleTagInput\\n}\\n\\ninput ArticleTagUpdateModerationsUpdateIfExistsInput {\\n  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!\\n  data: ArticleTagModerationUpdateWithoutArticleTagInput\\n}\\n\\ninput ArticleTagUpdateModerationsUpsertInput {\\n  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!\\n  create: ArticleTagModerationCreationWithoutArticleTagInput!\\n  update: ArticleTagModerationUpdateWithoutArticleTagInput\\n}\\n\\ninput ArticleUpdateTagsUpdateManyInput {\\n  where: ArticleTagFilterInput\\n  data: ArticleTagUpdateWithoutArticleInput\\n}\\n\\ninput ArticleUpdateTagsUpdateInput {\\n  where: ArticleTagUniqueFilterWithoutArticleInput!\\n  data: ArticleTagUpdateWithoutArticleInput\\n}\\n\\ninput ArticleUpdateTagsUpdateIfExistsInput {\\n  where: ArticleTagUniqueFilterWithoutArticleInput!\\n  data: ArticleTagUpdateWithoutArticleInput\\n}\\n\\ninput ArticleUpdateTagsUpsertInput {\\n  where: ArticleTagUniqueFilterWithoutArticleInput!\\n  create: ArticleTagCreationWithoutArticleInput!\\n  update: ArticleTagUpdateWithoutArticleInput\\n}\\n\\ninput ArticleUpdateExtensionInput {\\n  delete: Boolean\\n  deleteIfExists: Boolean\\n  create: ArticleExtensionCreationWithoutArticleInput\\n  createIfNotExists: ArticleExtensionCreationWithoutArticleInput\\n  update: ArticleExtensionUpdateWithoutArticleInput\\n  updateIfExists: ArticleExtensionUpdateWithoutArticleInput\\n  upsert: ArticleUpdateExtensionUpsertInput\\n}\\n\\n\\"\\"\\"The \\"ArticleExtension\\" node's update\\"\\"\\"\\ninput ArticleExtensionUpdateWithoutArticleInput {\\n  \\"\\"\\"The source of the article\\"\\"\\"\\n  source: NonEmptyTrimmedString\\n}\\n\\ninput ArticleUpdateExtensionUpsertInput {\\n  create: ArticleExtensionCreationWithoutArticleInput!\\n  update: ArticleExtensionUpdateWithoutArticleInput\\n}\\n\\ninput CategoryUpdateArticlesUpdateManyInput {\\n  where: ArticleFilterInput\\n  data: ArticleUpdateWithoutCategoryInput\\n}\\n\\ninput CategoryUpdateArticlesUpdateInput {\\n  where: ArticleUniqueFilterWithoutCategoryInput!\\n  data: ArticleUpdateWithoutCategoryInput\\n}\\n\\ninput CategoryUpdateArticlesUpdateIfExistsInput {\\n  where: ArticleUniqueFilterWithoutCategoryInput!\\n  data: ArticleUpdateWithoutCategoryInput\\n}\\n\\ninput CategoryUpdateArticlesUpsertInput {\\n  where: ArticleUniqueFilterWithoutCategoryInput!\\n  create: ArticleCreationWithoutCategoryInput!\\n  update: ArticleUpdateWithoutCategoryInput\\n}\\n\\ninput CategoryUpdateChildrenUpdateManyInput {\\n  where: CategoryFilterInput\\n  data: CategoryUpdateWithoutParentInput\\n}\\n\\ninput CategoryUpdateChildrenUpdateInput {\\n  where: CategoryUniqueFilterWithoutParentInput!\\n  data: CategoryUpdateWithoutParentInput\\n}\\n\\ninput CategoryUpdateChildrenUpdateIfExistsInput {\\n  where: CategoryUniqueFilterWithoutParentInput!\\n  data: CategoryUpdateWithoutParentInput\\n}\\n\\ninput CategoryUpdateChildrenUpsertInput {\\n  where: CategoryUniqueFilterWithoutParentInput!\\n  create: CategoryCreationWithoutParentInput!\\n  update: CategoryUpdateWithoutParentInput\\n}\\n\\n\\"\\"\\"The \\"ArticleExtension\\" node's creation\\"\\"\\"\\ninput ArticleExtensionCreationInput {\\n  article: ArticleExtensionCreationArticleInput!\\n\\n  \\"\\"\\"The source of the article\\"\\"\\"\\n  source: NonEmptyTrimmedString\\n}\\n\\ninput ArticleExtensionCreationArticleInput {\\n  \\"\\"\\"\\n  Connect an \\"Article\\" to a new \\"ArticleExtension\\" through the \\"ArticleExtension.article\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: ArticleUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create an \\"Article\\" and connect it to a new \\"ArticleExtension\\" through the \\"ArticleExtension.article\\" edge.\\n  \\"\\"\\"\\n  create: ArticleCreationInput\\n\\n  \\"\\"\\"\\n  Create an \\"Article\\" if it does not exist, and connect it to a new \\"ArticleExtension\\" through the \\"ArticleExtension.article\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleExtensionCreationArticleCreateIfNotExistsInput\\n}\\n\\ninput ArticleExtensionCreationArticleCreateIfNotExistsInput {\\n  where: ArticleUniqueFilterInput!\\n  data: ArticleCreationInput!\\n}\\n\\n\\"\\"\\"The \\"ArticleExtension\\" node's update\\"\\"\\"\\ninput ArticleExtensionUpdateInput {\\n  \\"\\"\\"The source of the article\\"\\"\\"\\n  source: NonEmptyTrimmedString\\n}\\n\\n\\"\\"\\"The \\"Tag\\" node's update\\"\\"\\"\\ninput TagUpdateInput {\\n  \\"\\"\\"A tag can be deprecated\\"\\"\\"\\n  deprecated: Boolean\\n  articles: TagUpdateArticlesInput\\n}\\n\\ninput TagUpdateArticlesInput {\\n  deleteAll: Boolean\\n  deleteMany: ArticleTagFilterInput\\n  delete: [ArticleTagUniqueFilterWithoutTagInput!]\\n  deleteIfExists: [ArticleTagUniqueFilterWithoutTagInput!]\\n  create: [ArticleTagCreationWithoutTagInput!]\\n  createIfNotExists: [TagUpdateArticlesCreateIfNotExistsInput!]\\n  updateAll: ArticleTagUpdateWithoutTagInput\\n  updateMany: [TagUpdateArticlesUpdateManyInput!]\\n  update: [TagUpdateArticlesUpdateInput!]\\n  updateIfExists: [TagUpdateArticlesUpdateIfExistsInput!]\\n  upsert: [TagUpdateArticlesUpsertInput!]\\n}\\n\\n\\"\\"\\"\\nGiven a \\"tag\\", identifies exactly one \\"ArticleTag\\" by \\"article\\"\\n\\"\\"\\"\\ninput ArticleTagUniqueFilterWithoutTagInput {\\n  article: ArticleUniqueFilterInput!\\n}\\n\\ninput TagUpdateArticlesCreateIfNotExistsInput {\\n  where: ArticleTagUniqueFilterWithoutTagInput!\\n  data: ArticleTagCreationWithoutTagInput!\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's update\\"\\"\\"\\ninput ArticleTagUpdateWithoutTagInput {\\n  order: UnsignedInt\\n  moderations: ArticleTagUpdateModerationsInput\\n}\\n\\ninput TagUpdateArticlesUpdateManyInput {\\n  where: ArticleTagFilterInput\\n  data: ArticleTagUpdateWithoutTagInput\\n}\\n\\ninput TagUpdateArticlesUpdateInput {\\n  where: ArticleTagUniqueFilterWithoutTagInput!\\n  data: ArticleTagUpdateWithoutTagInput\\n}\\n\\ninput TagUpdateArticlesUpdateIfExistsInput {\\n  where: ArticleTagUniqueFilterWithoutTagInput!\\n  data: ArticleTagUpdateWithoutTagInput\\n}\\n\\ninput TagUpdateArticlesUpsertInput {\\n  where: ArticleTagUniqueFilterWithoutTagInput!\\n  create: ArticleTagCreationWithoutTagInput!\\n  update: ArticleTagUpdateWithoutTagInput\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's creation\\"\\"\\"\\ninput ArticleTagCreationInput {\\n  article: ArticleTagCreationArticleInput!\\n  tag: ArticleTagCreationTagInput!\\n  order: UnsignedInt!\\n  moderations: ArticleTagCreationModerationsInput\\n}\\n\\n\\"\\"\\"The \\"ArticleTag\\" node's update\\"\\"\\"\\ninput ArticleTagUpdateInput {\\n  order: UnsignedInt\\n  moderations: ArticleTagUpdateModerationsInput\\n}\\n\\n\\"\\"\\"The \\"ArticleTagModeration\\" node's creation\\"\\"\\"\\ninput ArticleTagModerationCreationInput {\\n  articleTag: ArticleTagModerationCreationArticleTagInput!\\n  moderator: ArticleTagModerationCreationModeratorInput!\\n  moderation: NonEmptyTrimmedString\\n}\\n\\ninput ArticleTagModerationCreationArticleTagInput {\\n  \\"\\"\\"\\n  Connect an \\"ArticleTag\\" to a new \\"ArticleTagModeration\\" through the \\"ArticleTagModeration.articleTag\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: ArticleTagUniqueFilterInput\\n\\n  \\"\\"\\"\\n  Create an \\"ArticleTag\\" and connect it to a new \\"ArticleTagModeration\\" through the \\"ArticleTagModeration.articleTag\\" edge.\\n  \\"\\"\\"\\n  create: ArticleTagCreationInput\\n\\n  \\"\\"\\"\\n  Create an \\"ArticleTag\\" if it does not exist, and connect it to a new \\"ArticleTagModeration\\" through the \\"ArticleTagModeration.articleTag\\" edge.\\n  \\"\\"\\"\\n  createIfNotExists: ArticleTagModerationCreationArticleTagCreateIfNotExistsInput\\n}\\n\\ninput ArticleTagModerationCreationArticleTagCreateIfNotExistsInput {\\n  where: ArticleTagUniqueFilterInput!\\n  data: ArticleTagCreationInput!\\n}\\n\\n\\"\\"\\"The \\"ArticleTagModeration\\" node's update\\"\\"\\"\\ninput ArticleTagModerationUpdateInput {\\n  moderation: NonEmptyTrimmedString\\n}\\n\\n\\"\\"\\"The \\"UserProfile\\" node's creation\\"\\"\\"\\ninput UserProfileCreationInput {\\n  user: UserProfileCreationUserInput!\\n  birthday: Date\\n  facebookId: ID\\n  googleId: ID\\n  twitterHandle: ID\\n}\\n\\ninput UserProfileCreationUserInput {\\n  \\"\\"\\"\\n  Connect a \\"User\\" to a new \\"UserProfile\\" through the \\"UserProfile.user\\" edge, throw an error if it does not exist.\\n  \\"\\"\\"\\n  connect: UserUniqueFilterInput\\n}\\n\\n\\"\\"\\"The \\"UserProfile\\" node's update\\"\\"\\"\\ninput UserProfileUpdateInput {\\n  birthday: Date\\n  facebookId: ID\\n  googleId: ID\\n  twitterHandle: ID\\n}\\n\\ntype subscription {\\n  \\"\\"\\"Subscribe to the \\"Articles\\"' changes\\"\\"\\"\\n  articleChanges(\\n    \\"\\"\\"Changes since the given date will be included\\"\\"\\"\\n    since: DateTime\\n    where: ArticleFilterInput\\n  ): ArticleChange\\n\\n  \\"\\"\\"\\n  Scroll the \\"Articles\\"\\n  \\"\\"\\"\\n  articles(where: ArticleFilterInput): Article\\n\\n  \\"\\"\\"Subscribe to the \\"Categories\\"' changes\\"\\"\\"\\n  categoryChanges(\\n    \\"\\"\\"Changes since the given date will be included\\"\\"\\"\\n    since: DateTime\\n    where: CategoryFilterInput\\n  ): CategoryChange\\n\\n  \\"\\"\\"\\n  Scroll the \\"Categories\\"\\n  \\"\\"\\"\\n  categories(where: CategoryFilterInput): Category\\n\\n  \\"\\"\\"Subscribe to the \\"Tags\\"' changes\\"\\"\\"\\n  tagChanges(\\n    \\"\\"\\"Changes since the given date will be included\\"\\"\\"\\n    since: DateTime\\n    where: TagFilterInput\\n  ): TagChange\\n\\n  \\"\\"\\"Subscribe to the \\"Users\\"' changes\\"\\"\\"\\n  userChanges(\\n    \\"\\"\\"Changes since the given date will be included\\"\\"\\"\\n    since: DateTime\\n    where: UserFilterInput\\n  ): UserChange\\n\\n  \\"\\"\\"Subscribe to the \\"UserProfiles\\"' changes\\"\\"\\"\\n  userProfileChanges(\\n    \\"\\"\\"Changes since the given date will be included\\"\\"\\"\\n    since: DateTime\\n    where: UserProfileFilterInput\\n  ): UserProfileChange\\n}\\n\\n\\"\\"\\"\\nA single change in the \\"articleChanges\\"'s subscription, either a deletion (= \\"ArticleDeletion\\") or an upsert (= \\"Article\\")\\n\\"\\"\\"\\nunion ArticleChange = ArticleDeletion | Article\\n\\n\\"\\"\\"A single \\"Article\\" deletion\\"\\"\\"\\ntype ArticleDeletion {\\n  \\"\\"\\"This UUID identifies an Article publicly\\"\\"\\"\\n  id: UUIDv4!\\n  status: ArticleStatus!\\n  title: NonEmptySanitizedString!\\n  slug: Slug!\\n\\n  \\"\\"\\"The article's body\\"\\"\\"\\n  body: DraftJS\\n  createdBy: UserId\\n  createdAt: DateTime!\\n  updatedBy: UserUsername\\n  updatedAt: DateTime!\\n\\n  \\"\\"\\"Contains any arbitrary data you want to store alongside the article\\"\\"\\"\\n  metas: JSONObject\\n\\n  \\"\\"\\"Is the article highlighted?\\"\\"\\"\\n  highlighted: Boolean\\n\\n  \\"\\"\\"Is the article a partnership?\\"\\"\\"\\n  sponsored: Boolean\\n  views: UnsignedBigInt!\\n  score: UnsignedFloat!\\n  machineTags: JSONArray\\n}\\n\\ntype UserId {\\n  id: UUIDv4!\\n}\\n\\ntype UserUsername {\\n  username: NonEmptyTrimmedString!\\n}\\n\\n\\"\\"\\"\\nA single change in the \\"categoryChanges\\"'s subscription, either a deletion (= \\"CategoryDeletion\\") or an upsert (= \\"Category\\")\\n\\"\\"\\"\\nunion CategoryChange = CategoryDeletion | Category\\n\\n\\"\\"\\"A single \\"Category\\" deletion\\"\\"\\"\\ntype CategoryDeletion {\\n  id: UUIDv4!\\n  title: NonEmptyTrimmedString!\\n  slug: NonEmptyTrimmedString!\\n  order: UnsignedInt!\\n}\\n\\n\\"\\"\\"\\nA single change in the \\"tagChanges\\"'s subscription, either a deletion (= \\"TagDeletion\\") or an upsert (= \\"Tag\\")\\n\\"\\"\\"\\nunion TagChange = TagDeletion | Tag\\n\\n\\"\\"\\"A single \\"Tag\\" deletion\\"\\"\\"\\ntype TagDeletion {\\n  id: UUIDv4!\\n\\n  \\"\\"\\"A tag can be deprecated\\"\\"\\"\\n  deprecated: Boolean\\n  title: NonEmptyTrimmedString!\\n  slug: NonEmptyTrimmedString!\\n  createdAt: DateTime!\\n  updatedAt: DateTime!\\n}\\n\\n\\"\\"\\"\\nA single change in the \\"userChanges\\"'s subscription, either a deletion (= \\"UserDeletion\\") or an upsert (= \\"User\\")\\n\\"\\"\\"\\nunion UserChange = UserDeletion | User\\n\\n\\"\\"\\"A single \\"User\\" deletion\\"\\"\\"\\ntype UserDeletion {\\n  id: UUIDv4!\\n  username: NonEmptyTrimmedString!\\n}\\n\\n\\"\\"\\"\\nA single change in the \\"userProfileChanges\\"'s subscription, either a deletion (= \\"UserProfileDeletion\\") or an upsert (= \\"UserProfile\\")\\n\\"\\"\\"\\nunion UserProfileChange = UserProfileDeletion | UserProfile\\n\\n\\"\\"\\"A single \\"UserProfile\\" deletion\\"\\"\\"\\ntype UserProfileDeletion {\\n  user: UserId!\\n  birthday: Date\\n  facebookId: ID\\n  googleId: ID\\n  twitterHandle: ID\\n}"
`;
