// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphQL-Platform Works generates a valid GraphQL Schema 1`] = `
"schema {
  query: query
  mutation: mutation
  subscription: subscription
}

type query {
  """
  Gets the number of "Articles"
  """
  articleCount(where: ArticleFilterInput): UnsignedInt!

  """Either the "Article" exists or not?"""
  articleExists(where: ArticleUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "Articles"
  """
  articles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!

  """Retrieves one "Article", throws an error if it does not exist"""
  article(where: ArticleUniqueFilterInput!): Article!

  """Retrieves one "Article" if it exists, returns null otherwise"""
  articleIfExists(where: ArticleUniqueFilterInput!): Article

  """
  Given a list of unique-filter's value, retrieves the corresponding "Articles" in the same order, throws an error if one does not exist
  """
  articlesInOrder(
    where: [ArticleUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleFilterInput
  ): [Article!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "Articles", or null, in the same order
  """
  articlesInOrderIfExists(
    where: [ArticleUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleFilterInput
  ): [Article]!

  """
  Gets the number of "ArticleExtensions"
  """
  articleExtensionCount(where: ArticleExtensionFilterInput): UnsignedInt!

  """Either the "ArticleExtension" exists or not?"""
  articleExtensionExists(where: ArticleExtensionUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "ArticleExtensions"
  """
  articleExtensions(where: ArticleExtensionFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleExtension!]!

  """Retrieves one "ArticleExtension", throws an error if it does not exist"""
  articleExtension(where: ArticleExtensionUniqueFilterInput!): ArticleExtension!

  """Retrieves one "ArticleExtension" if it exists, returns null otherwise"""
  articleExtensionIfExists(where: ArticleExtensionUniqueFilterInput!): ArticleExtension

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleExtensions" in the same order, throws an error if one does not exist
  """
  articleExtensionsInOrder(
    where: [ArticleExtensionUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleExtensionFilterInput
  ): [ArticleExtension!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleExtensions", or null, in the same order
  """
  articleExtensionsInOrderIfExists(
    where: [ArticleExtensionUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleExtensionFilterInput
  ): [ArticleExtension]!

  """
  Gets the number of "Categories"
  """
  categoryCount(where: CategoryFilterInput): UnsignedInt!

  """Either the "Category" exists or not?"""
  categoryExists(where: CategoryUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "Categories"
  """
  categories(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Category!]!

  """Retrieves one "Category", throws an error if it does not exist"""
  category(where: CategoryUniqueFilterInput!): Category!

  """Retrieves one "Category" if it exists, returns null otherwise"""
  categoryIfExists(where: CategoryUniqueFilterInput!): Category

  """
  Given a list of unique-filter's value, retrieves the corresponding "Categories" in the same order, throws an error if one does not exist
  """
  categoriesInOrder(
    where: [CategoryUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: CategoryFilterInput
  ): [Category!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "Categories", or null, in the same order
  """
  categoriesInOrderIfExists(
    where: [CategoryUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: CategoryFilterInput
  ): [Category]!

  """
  Gets the number of "Tags"
  """
  tagCount(where: TagFilterInput): UnsignedInt!

  """Either the "Tag" exists or not?"""
  tagExists(where: TagUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "Tags"
  """
  tags(where: TagFilterInput, orderBy: [TagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Tag!]!

  """Retrieves one "Tag", throws an error if it does not exist"""
  tag(where: TagUniqueFilterInput!): Tag!

  """Retrieves one "Tag" if it exists, returns null otherwise"""
  tagIfExists(where: TagUniqueFilterInput!): Tag

  """
  Given a list of unique-filter's value, retrieves the corresponding "Tags" in the same order, throws an error if one does not exist
  """
  tagsInOrder(
    where: [TagUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: TagFilterInput
  ): [Tag!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "Tags", or null, in the same order
  """
  tagsInOrderIfExists(
    where: [TagUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: TagFilterInput
  ): [Tag]!

  """
  Gets the number of "ArticleTags"
  """
  articleTagCount(where: ArticleTagFilterInput): UnsignedInt!

  """Either the "ArticleTag" exists or not?"""
  articleTagExists(where: ArticleTagUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "ArticleTags"
  """
  articleTags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!

  """Retrieves one "ArticleTag", throws an error if it does not exist"""
  articleTag(where: ArticleTagUniqueFilterInput!): ArticleTag!

  """Retrieves one "ArticleTag" if it exists, returns null otherwise"""
  articleTagIfExists(where: ArticleTagUniqueFilterInput!): ArticleTag

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleTags" in the same order, throws an error if one does not exist
  """
  articleTagsInOrder(
    where: [ArticleTagUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleTagFilterInput
  ): [ArticleTag!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleTags", or null, in the same order
  """
  articleTagsInOrderIfExists(
    where: [ArticleTagUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleTagFilterInput
  ): [ArticleTag]!

  """
  Gets the number of "ArticleTagModerations"
  """
  articleTagModerationCount(where: ArticleTagModerationFilterInput): UnsignedInt!

  """Either the "ArticleTagModeration" exists or not?"""
  articleTagModerationExists(where: ArticleTagModerationUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "ArticleTagModerations"
  """
  articleTagModerations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!

  """
  Retrieves one "ArticleTagModeration", throws an error if it does not exist
  """
  articleTagModeration(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration!

  """
  Retrieves one "ArticleTagModeration" if it exists, returns null otherwise
  """
  articleTagModerationIfExists(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleTagModerations" in the same order, throws an error if one does not exist
  """
  articleTagModerationsInOrder(
    where: [ArticleTagModerationUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleTagModerationFilterInput
  ): [ArticleTagModeration!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "ArticleTagModerations", or null, in the same order
  """
  articleTagModerationsInOrderIfExists(
    where: [ArticleTagModerationUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: ArticleTagModerationFilterInput
  ): [ArticleTagModeration]!

  """
  Gets the number of "Users"
  """
  userCount(where: UserFilterInput): UnsignedInt!

  """Either the "User" exists or not?"""
  userExists(where: UserUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "Users"
  """
  users(where: UserFilterInput, orderBy: [UserOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [User!]!

  """Retrieves one "User", throws an error if it does not exist"""
  user(where: UserUniqueFilterInput!): User!

  """Retrieves one "User" if it exists, returns null otherwise"""
  userIfExists(where: UserUniqueFilterInput!): User

  """
  Given a list of unique-filter's value, retrieves the corresponding "Users" in the same order, throws an error if one does not exist
  """
  usersInOrder(
    where: [UserUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: UserFilterInput
  ): [User!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "Users", or null, in the same order
  """
  usersInOrderIfExists(
    where: [UserUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: UserFilterInput
  ): [User]!

  """
  Gets the number of "UserProfiles"
  """
  userProfileCount(where: UserProfileFilterInput): UnsignedInt!

  """Either the "UserProfile" exists or not?"""
  userProfileExists(where: UserProfileUniqueFilterInput!): Boolean!

  """
  Retrieves a list of "UserProfiles"
  """
  userProfiles(where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [UserProfile!]!

  """Retrieves one "UserProfile", throws an error if it does not exist"""
  userProfile(where: UserProfileUniqueFilterInput!): UserProfile!

  """Retrieves one "UserProfile" if it exists, returns null otherwise"""
  userProfileIfExists(where: UserProfileUniqueFilterInput!): UserProfile

  """
  Given a list of unique-filter's value, retrieves the corresponding "UserProfiles" in the same order, throws an error if one does not exist
  """
  userProfilesInOrder(
    where: [UserProfileUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: UserProfileFilterInput
  ): [UserProfile!]!

  """
  Given a list of unique-filter's value, retrieves the corresponding "UserProfiles", or null, in the same order
  """
  userProfilesInOrderIfExists(
    where: [UserProfileUniqueFilterInput!]!

    """
    It is possible to provide a filter in order to perform this query in a subset of the documents
    """
    subset: UserProfileFilterInput
  ): [UserProfile]!
  whoAmI: String!
}

"""
The \`UnsignedInt\` scalar type represents non-fractional unsigned whole numeric values, it can represent values between 0 and 4294967294 (= 2^32 - 1).
"""
scalar UnsignedInt

"""The "Article" nodes' filter"""
input ArticleFilterInput {
  id: UUIDv4
  id_not: UUIDv4
  id_in: [UUIDv4!]
  id_not_in: [UUIDv4!]
  status: ArticleStatus
  status_not: ArticleStatus
  status_in: [ArticleStatus!]
  status_not_in: [ArticleStatus!]
  title: NonEmptyTrimmedString
  title_not: NonEmptyTrimmedString
  title_in: [NonEmptyTrimmedString!]
  title_not_in: [NonEmptyTrimmedString!]
  title_contains: NonEmptyString
  title_not_contains: NonEmptyString
  title_starts_with: NonEmptyString
  title_not_starts_with: NonEmptyString
  title_ends_with: NonEmptyString
  title_not_ends_with: NonEmptyString
  slug: NonEmptyTrimmedString
  slug_not: NonEmptyTrimmedString
  slug_in: [NonEmptyTrimmedString!]
  slug_not_in: [NonEmptyTrimmedString!]
  slug_contains: NonEmptyString
  slug_not_contains: NonEmptyString
  slug_starts_with: NonEmptyString
  slug_not_starts_with: NonEmptyString
  slug_ends_with: NonEmptyString
  slug_not_ends_with: NonEmptyString
  body_is_null: Boolean
  body_contains: NonEmptyString
  body_not_contains: NonEmptyString
  body_starts_with: NonEmptyString
  body_not_starts_with: NonEmptyString
  body_ends_with: NonEmptyString
  body_not_ends_with: NonEmptyString
  category: CategoryFilterInput
  category_not: CategoryFilterInput
  category_is_null: Boolean
  createdBy: UserFilterInput
  createdBy_not: UserFilterInput
  createdBy_is_null: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  updatedBy: UserFilterInput
  updatedBy_not: UserFilterInput
  updatedBy_is_null: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  metas_is_null: Boolean
  highlighted: Boolean
  highlighted_not: Boolean
  highlighted_is_null: Boolean
  highlighted_in: [Boolean]
  highlighted_not_in: [Boolean]
  sponsored: Boolean
  sponsored_not: Boolean
  sponsored_is_null: Boolean
  sponsored_in: [Boolean]
  sponsored_not_in: [Boolean]
  views: UnsignedBigInt
  views_not: UnsignedBigInt
  views_gt: UnsignedBigInt
  views_gte: UnsignedBigInt
  views_lt: UnsignedBigInt
  views_lte: UnsignedBigInt
  views_in: [UnsignedBigInt!]
  views_not_in: [UnsignedBigInt!]
  score: UnsignedFloat
  score_not: UnsignedFloat
  score_gt: UnsignedFloat
  score_gte: UnsignedFloat
  score_lt: UnsignedFloat
  score_lte: UnsignedFloat
  score_in: [UnsignedFloat!]
  score_not_in: [UnsignedFloat!]
  machineTags_is_null: Boolean
  tags_every: ArticleTagFilterInput
  tags_some: ArticleTagFilterInput
  tags_none: ArticleTagFilterInput
  tagCount: UnsignedInt
  tagCount_not: UnsignedInt
  tagCount_gt: UnsignedInt
  tagCount_gte: UnsignedInt
  tagCount_lt: UnsignedInt
  tagCount_lte: UnsignedInt
  extension: ArticleExtensionFilterInput
  extension_not: ArticleExtensionFilterInput
  extension_is_null: Boolean
  AND: [ArticleFilterInput]
  OR: [ArticleFilterInput]
  NOT: ArticleFilterInput
}

"""A field whose value is a generic Universally Unique Identifier."""
scalar UUIDv4 @specifiedBy(url: "https://en.wikipedia.org/wiki/Universally_unique_identifier")

enum ArticleStatus {
  DRAFT
  PUBLISHED
  DELETED
}

"""
A string in which the leading and trailing whitespace characters are removed and cannot be empty afterwards.
"""
scalar NonEmptyTrimmedString

"""A non-empty string."""
scalar NonEmptyString

"""The "Category" nodes' filter"""
input CategoryFilterInput {
  id: UUIDv4
  id_not: UUIDv4
  id_in: [UUIDv4!]
  id_not_in: [UUIDv4!]
  title: NonEmptyTrimmedString
  title_not: NonEmptyTrimmedString
  title_in: [NonEmptyTrimmedString!]
  title_not_in: [NonEmptyTrimmedString!]
  title_contains: NonEmptyString
  title_not_contains: NonEmptyString
  title_starts_with: NonEmptyString
  title_not_starts_with: NonEmptyString
  title_ends_with: NonEmptyString
  title_not_ends_with: NonEmptyString
  slug: NonEmptyTrimmedString
  slug_not: NonEmptyTrimmedString
  slug_in: [NonEmptyTrimmedString!]
  slug_not_in: [NonEmptyTrimmedString!]
  slug_contains: NonEmptyString
  slug_not_contains: NonEmptyString
  slug_starts_with: NonEmptyString
  slug_not_starts_with: NonEmptyString
  slug_ends_with: NonEmptyString
  slug_not_ends_with: NonEmptyString
  parent: CategoryFilterInput
  parent_not: CategoryFilterInput
  parent_is_null: Boolean
  order: UnsignedInt
  order_not: UnsignedInt
  order_gt: UnsignedInt
  order_gte: UnsignedInt
  order_lt: UnsignedInt
  order_lte: UnsignedInt
  order_in: [UnsignedInt!]
  order_not_in: [UnsignedInt!]
  children_every: CategoryFilterInput
  children_some: CategoryFilterInput
  children_none: CategoryFilterInput
  childCount: UnsignedInt
  childCount_not: UnsignedInt
  childCount_gt: UnsignedInt
  childCount_gte: UnsignedInt
  childCount_lt: UnsignedInt
  childCount_lte: UnsignedInt
  articles_every: ArticleFilterInput
  articles_some: ArticleFilterInput
  articles_none: ArticleFilterInput
  articleCount: UnsignedInt
  articleCount_not: UnsignedInt
  articleCount_gt: UnsignedInt
  articleCount_gte: UnsignedInt
  articleCount_lt: UnsignedInt
  articleCount_lte: UnsignedInt
  AND: [CategoryFilterInput]
  OR: [CategoryFilterInput]
  NOT: CategoryFilterInput
}

"""The "User" nodes' filter"""
input UserFilterInput {
  id: UUIDv4
  id_not: UUIDv4
  id_in: [UUIDv4!]
  id_not_in: [UUIDv4!]
  username: NonEmptyTrimmedString
  username_not: NonEmptyTrimmedString
  username_in: [NonEmptyTrimmedString!]
  username_not_in: [NonEmptyTrimmedString!]
  username_contains: NonEmptyString
  username_not_contains: NonEmptyString
  username_starts_with: NonEmptyString
  username_not_starts_with: NonEmptyString
  username_ends_with: NonEmptyString
  username_not_ends_with: NonEmptyString
  createdArticles_every: ArticleFilterInput
  createdArticles_some: ArticleFilterInput
  createdArticles_none: ArticleFilterInput
  createdArticleCount: UnsignedInt
  createdArticleCount_not: UnsignedInt
  createdArticleCount_gt: UnsignedInt
  createdArticleCount_gte: UnsignedInt
  createdArticleCount_lt: UnsignedInt
  createdArticleCount_lte: UnsignedInt
  updatedArticles_every: ArticleFilterInput
  updatedArticles_some: ArticleFilterInput
  updatedArticles_none: ArticleFilterInput
  updatedArticleCount: UnsignedInt
  updatedArticleCount_not: UnsignedInt
  updatedArticleCount_gt: UnsignedInt
  updatedArticleCount_gte: UnsignedInt
  updatedArticleCount_lt: UnsignedInt
  updatedArticleCount_lte: UnsignedInt
  profile: UserProfileFilterInput
  profile_not: UserProfileFilterInput
  profile_is_null: Boolean
  articleTagModerations_every: ArticleTagModerationFilterInput
  articleTagModerations_some: ArticleTagModerationFilterInput
  articleTagModerations_none: ArticleTagModerationFilterInput
  articleTagModerationCount: UnsignedInt
  articleTagModerationCount_not: UnsignedInt
  articleTagModerationCount_gt: UnsignedInt
  articleTagModerationCount_gte: UnsignedInt
  articleTagModerationCount_lt: UnsignedInt
  articleTagModerationCount_lte: UnsignedInt
  AND: [UserFilterInput]
  OR: [UserFilterInput]
  NOT: UserFilterInput
}

"""The "UserProfile" nodes' filter"""
input UserProfileFilterInput {
  user: UserFilterInput
  user_not: UserFilterInput
  birthday: Date
  birthday_not: Date
  birthday_is_null: Boolean
  birthday_gt: Date
  birthday_gte: Date
  birthday_lt: Date
  birthday_lte: Date
  birthday_in: [Date]
  birthday_not_in: [Date]
  facebookId: ID
  facebookId_not: ID
  facebookId_is_null: Boolean
  facebookId_in: [ID]
  facebookId_not_in: [ID]
  googleId: ID
  googleId_not: ID
  googleId_is_null: Boolean
  googleId_in: [ID]
  googleId_not_in: [ID]
  twitterHandle: ID
  twitterHandle_not: ID
  twitterHandle_is_null: Boolean
  twitterHandle_in: [ID]
  twitterHandle_not_in: [ID]
  AND: [UserProfileFilterInput]
  OR: [UserProfileFilterInput]
  NOT: UserProfileFilterInput
}

"""
A date string, such as "2007-12-03", compliant with the ISO 8601 extended format.
"""
scalar Date @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601")

"""The "ArticleTagModeration" nodes' filter"""
input ArticleTagModerationFilterInput {
  articleTag: ArticleTagFilterInput
  articleTag_not: ArticleTagFilterInput
  moderator: UserFilterInput
  moderator_not: UserFilterInput
  moderation: NonEmptyTrimmedString
  moderation_not: NonEmptyTrimmedString
  moderation_is_null: Boolean
  moderation_in: [NonEmptyTrimmedString]
  moderation_not_in: [NonEmptyTrimmedString]
  moderation_contains: NonEmptyString
  moderation_not_contains: NonEmptyString
  moderation_starts_with: NonEmptyString
  moderation_not_starts_with: NonEmptyString
  moderation_ends_with: NonEmptyString
  moderation_not_ends_with: NonEmptyString
  AND: [ArticleTagModerationFilterInput]
  OR: [ArticleTagModerationFilterInput]
  NOT: ArticleTagModerationFilterInput
}

"""The "ArticleTag" nodes' filter"""
input ArticleTagFilterInput {
  article: ArticleFilterInput
  article_not: ArticleFilterInput
  tag: TagFilterInput
  tag_not: TagFilterInput
  order: UnsignedInt
  order_not: UnsignedInt
  order_gt: UnsignedInt
  order_gte: UnsignedInt
  order_lt: UnsignedInt
  order_lte: UnsignedInt
  order_in: [UnsignedInt!]
  order_not_in: [UnsignedInt!]
  moderations_every: ArticleTagModerationFilterInput
  moderations_some: ArticleTagModerationFilterInput
  moderations_none: ArticleTagModerationFilterInput
  moderationCount: UnsignedInt
  moderationCount_not: UnsignedInt
  moderationCount_gt: UnsignedInt
  moderationCount_gte: UnsignedInt
  moderationCount_lt: UnsignedInt
  moderationCount_lte: UnsignedInt
  AND: [ArticleTagFilterInput]
  OR: [ArticleTagFilterInput]
  NOT: ArticleTagFilterInput
}

"""The "Tag" nodes' filter"""
input TagFilterInput {
  id: UUIDv4
  id_not: UUIDv4
  id_in: [UUIDv4!]
  id_not_in: [UUIDv4!]
  deprecated: Boolean
  deprecated_not: Boolean
  deprecated_is_null: Boolean
  deprecated_in: [Boolean]
  deprecated_not_in: [Boolean]
  title: NonEmptyTrimmedString
  title_not: NonEmptyTrimmedString
  title_in: [NonEmptyTrimmedString!]
  title_not_in: [NonEmptyTrimmedString!]
  title_contains: NonEmptyString
  title_not_contains: NonEmptyString
  title_starts_with: NonEmptyString
  title_not_starts_with: NonEmptyString
  title_ends_with: NonEmptyString
  title_not_ends_with: NonEmptyString
  slug: NonEmptyTrimmedString
  slug_not: NonEmptyTrimmedString
  slug_in: [NonEmptyTrimmedString!]
  slug_not_in: [NonEmptyTrimmedString!]
  slug_contains: NonEmptyString
  slug_not_contains: NonEmptyString
  slug_starts_with: NonEmptyString
  slug_not_starts_with: NonEmptyString
  slug_ends_with: NonEmptyString
  slug_not_ends_with: NonEmptyString
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  articles_every: ArticleTagFilterInput
  articles_some: ArticleTagFilterInput
  articles_none: ArticleTagFilterInput
  articleCount: UnsignedInt
  articleCount_not: UnsignedInt
  articleCount_gt: UnsignedInt
  articleCount_gte: UnsignedInt
  articleCount_lt: UnsignedInt
  articleCount_lte: UnsignedInt
  AND: [TagFilterInput]
  OR: [TagFilterInput]
  NOT: TagFilterInput
}

"""
A date-time string, such as "2007-12-03T10:15:30.123Z", compliant with the ISO 8601 extended format.
"""
scalar DateTime @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601")

"""
The \`UnsignedBigInt\` scalar type represents non-fractional unsigned whole numeric values.
"""
scalar UnsignedBigInt @specifiedBy(url: "https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects")

"""
The \`UnsignedFloat\` scalar type represents unsigned double-precision fractional values.
"""
scalar UnsignedFloat @specifiedBy(url: "https://en.wikipedia.org/wiki/IEEE_floating_point")

"""The "ArticleExtension" nodes' filter"""
input ArticleExtensionFilterInput {
  article: ArticleFilterInput
  article_not: ArticleFilterInput
  source: NonEmptyTrimmedString
  source_not: NonEmptyTrimmedString
  source_is_null: Boolean
  source_in: [NonEmptyTrimmedString]
  source_not_in: [NonEmptyTrimmedString]
  source_contains: NonEmptyString
  source_not_contains: NonEmptyString
  source_starts_with: NonEmptyString
  source_not_starts_with: NonEmptyString
  source_ends_with: NonEmptyString
  source_not_ends_with: NonEmptyString
  AND: [ArticleExtensionFilterInput]
  OR: [ArticleExtensionFilterInput]
  NOT: ArticleExtensionFilterInput
}

"""
Identifies exactly one "Article" with one of the following combination of components' value:
- id
- category / slug
"""
input ArticleUniqueFilterInput {
  """This UUID identifies an Article publicly"""
  id: UUIDv4
  category: CategoryUniqueFilterInput
  slug: NonEmptyTrimmedString
}

"""
Identifies exactly one "Category" with one of the following combination of components' value:
- id
- parent / slug
- parent / order
"""
input CategoryUniqueFilterInput {
  id: UUIDv4
  parent: CategoryUniqueFilterInput
  slug: NonEmptyTrimmedString
  order: UnsignedInt
}

"""The article is the main resource, written by the journalists"""
type Article implements PublicNodeInterface {
  """This UUID identifies an Article publicly"""
  id: UUIDv4!
  status: ArticleStatus!
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!

  """The article's body"""
  body: DraftJS
  category: Category
  createdBy: User
  createdAt: DateTime!
  updatedBy: User
  updatedAt: DateTime!

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  views: UnsignedBigInt!
  score: UnsignedFloat!
  machineTags: JSONArray
  tags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!] = [order_ASC], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!

  """
  Number of "tags"
  """
  tagCount(where: ArticleTagFilterInput): UnsignedInt!
  extension: ArticleExtension

  """A custom field with a dependency"""
  lowerCasedTitle(
    """Optional, a prefix"""
    prefix: String
  ): NonEmptyTrimmedString!

  """A custom field with a dependency"""
  upperCasedTitle: NonEmptyTrimmedString!
  similars(
    """The number of similar articles to return"""
    first: UnsignedInt!
  ): [Article!]!
}

"""Exemple of interface"""
interface PublicNodeInterface {
  """Every public node have a public id"""
  id: UUIDv4!
}

"""
The DraftJS raw state contains a list of content blocks, as well as a map of all relevant entity objects.
"""
scalar DraftJS @specifiedBy(url: "https://draftjs.org/docs/api-reference-data-conversion/#convertfromraw")

type Category implements PublicNodeInterface {
  id: UUIDv4!
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!
  parent: Category
  order: UnsignedInt!

  """This category's children"""
  children(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Category!]!

  """
  Number of "children"
  """
  childCount(where: CategoryFilterInput): UnsignedInt!

  """The articles attached to this category"""
  articles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!

  """
  Number of "articles"
  """
  articleCount(where: ArticleFilterInput): UnsignedInt!
}

"""Order the "Category" nodes"""
enum CategoryOrderingInput {
  """from the lowest "order" to the highest"""
  order_ASC

  """from the highest "order" to the lowest"""
  order_DESC

  """from the lowest number of "children" to the highest"""
  childCount_ASC

  """from the highest number of "children" to the lowest"""
  childCount_DESC

  """from the lowest number of "articles" to the highest"""
  articleCount_ASC

  """from the highest number of "articles" to the lowest"""
  articleCount_DESC
}

"""Order the "Article" nodes"""
enum ArticleOrderingInput {
  """from the lowest "createdAt" to the highest"""
  createdAt_ASC

  """from the highest "createdAt" to the lowest"""
  createdAt_DESC

  """from the lowest "updatedAt" to the highest"""
  updatedAt_ASC

  """from the highest "updatedAt" to the lowest"""
  updatedAt_DESC

  """from the lowest "views" to the highest"""
  views_ASC

  """from the highest "views" to the lowest"""
  views_DESC

  """from the lowest "score" to the highest"""
  score_ASC

  """from the highest "score" to the lowest"""
  score_DESC

  """from the lowest number of "tags" to the highest"""
  tagCount_ASC

  """from the highest number of "tags" to the lowest"""
  tagCount_DESC
}

type User implements PublicNodeInterface {
  id: UUIDv4!
  username: NonEmptyTrimmedString!

  """All the articles this user has created"""
  createdArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!

  """
  Number of "createdArticles"
  """
  createdArticleCount(where: ArticleFilterInput): UnsignedInt!

  """All the articles this user has updated"""
  updatedArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [Article!]!

  """
  Number of "updatedArticles"
  """
  updatedArticleCount(where: ArticleFilterInput): UnsignedInt!

  """This user's profile, only the optional informations"""
  profile: UserProfile
  articleTagModerations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!

  """
  Number of "articleTagModerations"
  """
  articleTagModerationCount(where: ArticleTagModerationFilterInput): UnsignedInt!
}

type UserProfile {
  user: User!
  birthday: Date
  facebookId: ID
  googleId: ID
  twitterHandle: ID
}

type ArticleTagModeration {
  articleTag: ArticleTag!
  moderator: User!
  moderation: NonEmptyTrimmedString
}

type ArticleTag {
  article: Article!
  tag: Tag!
  order: UnsignedInt!
  moderations(where: ArticleTagModerationFilterInput, skip: UnsignedInt, first: UnsignedInt!): [ArticleTagModeration!]!

  """
  Number of "moderations"
  """
  moderationCount(where: ArticleTagModerationFilterInput): UnsignedInt!
}

type Tag implements PublicNodeInterface {
  id: UUIDv4!

  """A tag can be deprecated"""
  deprecated: Boolean
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!
  createdAt: DateTime!
  updatedAt: DateTime!
  articles(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], skip: UnsignedInt, first: UnsignedInt!): [ArticleTag!]!

  """
  Number of "articles"
  """
  articleCount(where: ArticleTagFilterInput): UnsignedInt!
}

"""Order the "ArticleTag" nodes"""
enum ArticleTagOrderingInput {
  """from the lowest "order" to the highest"""
  order_ASC

  """from the highest "order" to the lowest"""
  order_DESC

  """from the lowest number of "moderations" to the highest"""
  moderationCount_ASC

  """from the highest number of "moderations" to the lowest"""
  moderationCount_DESC
}

"""The \`JSONObject\` scalar type represents JSON objects."""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""The \`JSONArray\` scalar type represents JSON arrays."""
scalar JSONArray @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type ArticleExtension {
  article: Article!

  """The source of the article"""
  source: NonEmptyTrimmedString
}

"""
Identifies exactly one "ArticleExtension" with one of the following combination of components' value:
- article
"""
input ArticleExtensionUniqueFilterInput {
  article: ArticleUniqueFilterInput!
}

"""
Identifies exactly one "Tag" with one of the following combination of components' value:
- id
- slug
"""
input TagUniqueFilterInput {
  id: UUIDv4
  slug: NonEmptyTrimmedString
}

"""Order the "Tag" nodes"""
enum TagOrderingInput {
  """from the lowest "createdAt" to the highest"""
  createdAt_ASC

  """from the highest "createdAt" to the lowest"""
  createdAt_DESC

  """from the lowest "updatedAt" to the highest"""
  updatedAt_ASC

  """from the highest "updatedAt" to the lowest"""
  updatedAt_DESC

  """from the lowest number of "articles" to the highest"""
  articleCount_ASC

  """from the highest number of "articles" to the lowest"""
  articleCount_DESC
}

"""
Identifies exactly one "ArticleTag" with one of the following combination of components' value:
- article / tag
- article / order
"""
input ArticleTagUniqueFilterInput {
  article: ArticleUniqueFilterInput!
  tag: TagUniqueFilterInput
  order: UnsignedInt
}

"""
Identifies exactly one "ArticleTagModeration" with one of the following combination of components' value:
- articleTag / moderator
"""
input ArticleTagModerationUniqueFilterInput {
  articleTag: ArticleTagUniqueFilterInput!
  moderator: UserUniqueFilterInput!
}

"""
Identifies exactly one "User" with one of the following combination of components' value:
- id
- username
"""
input UserUniqueFilterInput {
  id: UUIDv4
  username: NonEmptyTrimmedString
}

"""Order the "User" nodes"""
enum UserOrderingInput {
  """from the lowest number of "createdArticles" to the highest"""
  createdArticleCount_ASC

  """from the highest number of "createdArticles" to the lowest"""
  createdArticleCount_DESC

  """from the lowest number of "updatedArticles" to the highest"""
  updatedArticleCount_ASC

  """from the highest number of "updatedArticles" to the lowest"""
  updatedArticleCount_DESC

  """from the lowest number of "articleTagModerations" to the highest"""
  articleTagModerationCount_ASC

  """from the highest number of "articleTagModerations" to the lowest"""
  articleTagModerationCount_DESC
}

"""
Identifies exactly one "UserProfile" with one of the following combination of components' value:
- user
"""
input UserProfileUniqueFilterInput {
  user: UserUniqueFilterInput!
}

"""Order the "UserProfile" nodes"""
enum UserProfileOrderingInput {
  """from the lowest "birthday" to the highest"""
  birthday_ASC

  """from the highest "birthday" to the lowest"""
  birthday_DESC
}

type mutation {
  """Creates one "Article", throws an error if it already exists"""
  createArticle(data: ArticleCreationInput!): Article!

  """
  Creates one "Article" if it does not exist, returns the existing otherwise
  """
  createArticleIfNotExists(where: ArticleUniqueFilterInput!, data: ArticleCreationInput!): Article!

  """Creates some "Article", throws an error if they already exist"""
  createArticles(data: [ArticleCreationInput!]!): [Article!]!

  """
  Updates many "Articles"
  """
  updateArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], first: UnsignedInt!, data: ArticleUpdateInput): [Article!]!

  """Updates one "Article", throws an error if it does not exists"""
  updateArticle(where: ArticleUniqueFilterInput!, data: ArticleUpdateInput): Article!

  """Updates one "Article" if it exists, returns null otherwise"""
  updateArticleIfExists(where: ArticleUniqueFilterInput!, data: ArticleUpdateInput): Article

  """
  Deletes many "Articles"
  """
  deleteArticles(where: ArticleFilterInput, orderBy: [ArticleOrderingInput!], first: UnsignedInt!): [Article!]!

  """Deletes one "Article", throws an error if it does not exists"""
  deleteArticle(where: ArticleUniqueFilterInput!): Article!

  """Deletes one "Article" if it exists, returns null otherwise"""
  deleteArticleIfExists(where: ArticleUniqueFilterInput!): Article

  """Updates an existing "Article" or creates a new one"""
  upsertArticle(where: ArticleUniqueFilterInput!, create: ArticleCreationInput!, update: ArticleUpdateInput): Article!

  """Creates one "ArticleExtension", throws an error if it already exists"""
  createArticleExtension(data: ArticleExtensionCreationInput!): ArticleExtension!

  """
  Creates one "ArticleExtension" if it does not exist, returns the existing otherwise
  """
  createArticleExtensionIfNotExists(where: ArticleExtensionUniqueFilterInput!, data: ArticleExtensionCreationInput!): ArticleExtension!

  """Creates some "ArticleExtension", throws an error if they already exist"""
  createArticleExtensions(data: [ArticleExtensionCreationInput!]!): [ArticleExtension!]!

  """
  Updates many "ArticleExtensions"
  """
  updateArticleExtensions(where: ArticleExtensionFilterInput, first: UnsignedInt!, data: ArticleExtensionUpdateInput): [ArticleExtension!]!

  """Updates one "ArticleExtension", throws an error if it does not exists"""
  updateArticleExtension(where: ArticleExtensionUniqueFilterInput!, data: ArticleExtensionUpdateInput): ArticleExtension!

  """Updates one "ArticleExtension" if it exists, returns null otherwise"""
  updateArticleExtensionIfExists(where: ArticleExtensionUniqueFilterInput!, data: ArticleExtensionUpdateInput): ArticleExtension

  """
  Deletes many "ArticleExtensions"
  """
  deleteArticleExtensions(where: ArticleExtensionFilterInput, first: UnsignedInt!): [ArticleExtension!]!

  """Deletes one "ArticleExtension", throws an error if it does not exists"""
  deleteArticleExtension(where: ArticleExtensionUniqueFilterInput!): ArticleExtension!

  """Deletes one "ArticleExtension" if it exists, returns null otherwise"""
  deleteArticleExtensionIfExists(where: ArticleExtensionUniqueFilterInput!): ArticleExtension

  """Updates an existing "ArticleExtension" or creates a new one"""
  upsertArticleExtension(where: ArticleExtensionUniqueFilterInput!, create: ArticleExtensionCreationInput!, update: ArticleExtensionUpdateInput): ArticleExtension!

  """Creates one "Category", throws an error if it already exists"""
  createCategory(data: CategoryCreationInput!): Category!

  """
  Creates one "Category" if it does not exist, returns the existing otherwise
  """
  createCategoryIfNotExists(where: CategoryUniqueFilterInput!, data: CategoryCreationInput!): Category!

  """Creates some "Category", throws an error if they already exist"""
  createCategories(data: [CategoryCreationInput!]!): [Category!]!

  """
  Updates many "Categories"
  """
  updateCategories(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], first: UnsignedInt!, data: CategoryUpdateInput): [Category!]!

  """Updates one "Category", throws an error if it does not exists"""
  updateCategory(where: CategoryUniqueFilterInput!, data: CategoryUpdateInput): Category!

  """Updates one "Category" if it exists, returns null otherwise"""
  updateCategoryIfExists(where: CategoryUniqueFilterInput!, data: CategoryUpdateInput): Category

  """
  Deletes many "Categories"
  """
  deleteCategories(where: CategoryFilterInput, orderBy: [CategoryOrderingInput!], first: UnsignedInt!): [Category!]!

  """Deletes one "Category", throws an error if it does not exists"""
  deleteCategory(where: CategoryUniqueFilterInput!): Category!

  """Deletes one "Category" if it exists, returns null otherwise"""
  deleteCategoryIfExists(where: CategoryUniqueFilterInput!): Category

  """Updates an existing "Category" or creates a new one"""
  upsertCategory(where: CategoryUniqueFilterInput!, create: CategoryCreationInput!, update: CategoryUpdateInput): Category!

  """Creates one "Tag", throws an error if it already exists"""
  createTag(data: TagCreationInput!): Tag!

  """Creates one "Tag" if it does not exist, returns the existing otherwise"""
  createTagIfNotExists(where: TagUniqueFilterInput!, data: TagCreationInput!): Tag!

  """Creates some "Tag", throws an error if they already exist"""
  createTags(data: [TagCreationInput!]!): [Tag!]!

  """
  Updates many "Tags"
  """
  updateTags(where: TagFilterInput, orderBy: [TagOrderingInput!], first: UnsignedInt!, data: TagUpdateInput): [Tag!]!

  """Updates one "Tag", throws an error if it does not exists"""
  updateTag(where: TagUniqueFilterInput!, data: TagUpdateInput): Tag!

  """Updates one "Tag" if it exists, returns null otherwise"""
  updateTagIfExists(where: TagUniqueFilterInput!, data: TagUpdateInput): Tag

  """
  Deletes many "Tags"
  """
  deleteTags(where: TagFilterInput, orderBy: [TagOrderingInput!], first: UnsignedInt!): [Tag!]!

  """Deletes one "Tag", throws an error if it does not exists"""
  deleteTag(where: TagUniqueFilterInput!): Tag!

  """Deletes one "Tag" if it exists, returns null otherwise"""
  deleteTagIfExists(where: TagUniqueFilterInput!): Tag

  """Updates an existing "Tag" or creates a new one"""
  upsertTag(where: TagUniqueFilterInput!, create: TagCreationInput!, update: TagUpdateInput): Tag!

  """Creates one "ArticleTag", throws an error if it already exists"""
  createArticleTag(data: ArticleTagCreationInput!): ArticleTag!

  """
  Creates one "ArticleTag" if it does not exist, returns the existing otherwise
  """
  createArticleTagIfNotExists(where: ArticleTagUniqueFilterInput!, data: ArticleTagCreationInput!): ArticleTag!

  """Creates some "ArticleTag", throws an error if they already exist"""
  createArticleTags(data: [ArticleTagCreationInput!]!): [ArticleTag!]!

  """
  Updates many "ArticleTags"
  """
  updateArticleTags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], first: UnsignedInt!, data: ArticleTagUpdateInput): [ArticleTag!]!

  """Updates one "ArticleTag", throws an error if it does not exists"""
  updateArticleTag(where: ArticleTagUniqueFilterInput!, data: ArticleTagUpdateInput): ArticleTag!

  """Updates one "ArticleTag" if it exists, returns null otherwise"""
  updateArticleTagIfExists(where: ArticleTagUniqueFilterInput!, data: ArticleTagUpdateInput): ArticleTag

  """
  Deletes many "ArticleTags"
  """
  deleteArticleTags(where: ArticleTagFilterInput, orderBy: [ArticleTagOrderingInput!], first: UnsignedInt!): [ArticleTag!]!

  """Deletes one "ArticleTag", throws an error if it does not exists"""
  deleteArticleTag(where: ArticleTagUniqueFilterInput!): ArticleTag!

  """Deletes one "ArticleTag" if it exists, returns null otherwise"""
  deleteArticleTagIfExists(where: ArticleTagUniqueFilterInput!): ArticleTag

  """Updates an existing "ArticleTag" or creates a new one"""
  upsertArticleTag(where: ArticleTagUniqueFilterInput!, create: ArticleTagCreationInput!, update: ArticleTagUpdateInput): ArticleTag!

  """
  Creates one "ArticleTagModeration", throws an error if it already exists
  """
  createArticleTagModeration(data: ArticleTagModerationCreationInput!): ArticleTagModeration!

  """
  Creates one "ArticleTagModeration" if it does not exist, returns the existing otherwise
  """
  createArticleTagModerationIfNotExists(where: ArticleTagModerationUniqueFilterInput!, data: ArticleTagModerationCreationInput!): ArticleTagModeration!

  """
  Creates some "ArticleTagModeration", throws an error if they already exist
  """
  createArticleTagModerations(data: [ArticleTagModerationCreationInput!]!): [ArticleTagModeration!]!

  """
  Updates many "ArticleTagModerations"
  """
  updateArticleTagModerations(where: ArticleTagModerationFilterInput, first: UnsignedInt!, data: ArticleTagModerationUpdateInput): [ArticleTagModeration!]!

  """
  Updates one "ArticleTagModeration", throws an error if it does not exists
  """
  updateArticleTagModeration(where: ArticleTagModerationUniqueFilterInput!, data: ArticleTagModerationUpdateInput): ArticleTagModeration!

  """
  Updates one "ArticleTagModeration" if it exists, returns null otherwise
  """
  updateArticleTagModerationIfExists(where: ArticleTagModerationUniqueFilterInput!, data: ArticleTagModerationUpdateInput): ArticleTagModeration

  """
  Deletes many "ArticleTagModerations"
  """
  deleteArticleTagModerations(where: ArticleTagModerationFilterInput, first: UnsignedInt!): [ArticleTagModeration!]!

  """
  Deletes one "ArticleTagModeration", throws an error if it does not exists
  """
  deleteArticleTagModeration(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration!

  """
  Deletes one "ArticleTagModeration" if it exists, returns null otherwise
  """
  deleteArticleTagModerationIfExists(where: ArticleTagModerationUniqueFilterInput!): ArticleTagModeration

  """Updates an existing "ArticleTagModeration" or creates a new one"""
  upsertArticleTagModeration(where: ArticleTagModerationUniqueFilterInput!, create: ArticleTagModerationCreationInput!, update: ArticleTagModerationUpdateInput): ArticleTagModeration!

  """Creates one "UserProfile", throws an error if it already exists"""
  createUserProfile(data: UserProfileCreationInput!): UserProfile!

  """
  Creates one "UserProfile" if it does not exist, returns the existing otherwise
  """
  createUserProfileIfNotExists(where: UserProfileUniqueFilterInput!, data: UserProfileCreationInput!): UserProfile!

  """Creates some "UserProfile", throws an error if they already exist"""
  createUserProfiles(data: [UserProfileCreationInput!]!): [UserProfile!]!

  """
  Updates many "UserProfiles"
  """
  updateUserProfiles(where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], first: UnsignedInt!, data: UserProfileUpdateInput): [UserProfile!]!

  """Updates one "UserProfile", throws an error if it does not exists"""
  updateUserProfile(where: UserProfileUniqueFilterInput!, data: UserProfileUpdateInput): UserProfile!

  """Updates one "UserProfile" if it exists, returns null otherwise"""
  updateUserProfileIfExists(where: UserProfileUniqueFilterInput!, data: UserProfileUpdateInput): UserProfile

  """
  Deletes many "UserProfiles"
  """
  deleteUserProfiles(where: UserProfileFilterInput, orderBy: [UserProfileOrderingInput!], first: UnsignedInt!): [UserProfile!]!

  """Deletes one "UserProfile", throws an error if it does not exists"""
  deleteUserProfile(where: UserProfileUniqueFilterInput!): UserProfile!

  """Deletes one "UserProfile" if it exists, returns null otherwise"""
  deleteUserProfileIfExists(where: UserProfileUniqueFilterInput!): UserProfile

  """Updates an existing "UserProfile" or creates a new one"""
  upsertUserProfile(where: UserProfileUniqueFilterInput!, create: UserProfileCreationInput!, update: UserProfileUpdateInput): UserProfile!
}

"""The "Article" node's creation"""
input ArticleCreationInput {
  """You can either provide an UUID or let one be generated for you"""
  id: UUIDv4
  status: ArticleStatus! = DRAFT
  title: NonEmptyTrimmedString!

  """You can either provide a slug or let the title be "slugified" for you"""
  slug: NonEmptyTrimmedString

  """The article's body"""
  body: DraftJS
  category: ArticleCreationCategoryInput

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  machineTags: JSONArray
  tags: ArticleCreationTagsInput
  extension: ArticleCreationExtensionInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input ArticleCreationCategoryInput {
  """
  Connect a "Category" to a new "Article" through the "Article.category" edge, throw an error if it does not exist.
  """
  connect: CategoryUniqueFilterInput

  """
  Connect a "Category" to a new "Article" through the "Article.category" edge, if it exists.
  """
  connectIfExists: CategoryUniqueFilterInput

  """
  Create a "Category" and connect it to a new "Article" through the "Article.category" edge.
  """
  create: CategoryCreationInput

  """
  Create a "Category" if it does not exist, and connect it to a new "Article" through the "Article.category" edge.
  """
  createIfNotExists: ArticleCreationCategoryCreateIfNotExistsInput
}

"""The "Category" node's creation"""
input CategoryCreationInput {
  """You can either provide an UUID or let one be generated for you"""
  id: UUIDv4
  title: NonEmptyTrimmedString!

  """You can either provide a slug or let the title be "slugified" for you"""
  slug: NonEmptyTrimmedString
  parent: CategoryCreationParentInput
  order: UnsignedInt!

  """This category's children"""
  children: CategoryCreationChildrenInput

  """The articles attached to this category"""
  articles: CategoryCreationArticlesInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input CategoryCreationParentInput {
  """
  Connect a "Category" to a new "Category" through the "Category.parent" edge, throw an error if it does not exist.
  """
  connect: CategoryUniqueFilterInput

  """
  Connect a "Category" to a new "Category" through the "Category.parent" edge, if it exists.
  """
  connectIfExists: CategoryUniqueFilterInput

  """
  Create a "Category" and connect it to a new "Category" through the "Category.parent" edge.
  """
  create: CategoryCreationInput

  """
  Create a "Category" if it does not exist, and connect it to a new "Category" through the "Category.parent" edge.
  """
  createIfNotExists: CategoryCreationParentCreateIfNotExistsInput
}

input CategoryCreationParentCreateIfNotExistsInput {
  where: CategoryUniqueFilterInput!
  data: CategoryCreationInput!
}

input CategoryCreationChildrenInput {
  create: [CategoryCreationWithoutParentInput!]
}

"""The "Category" node's creation"""
input CategoryCreationWithoutParentInput {
  """You can either provide an UUID or let one be generated for you"""
  id: UUIDv4
  title: NonEmptyTrimmedString!

  """You can either provide a slug or let the title be "slugified" for you"""
  slug: NonEmptyTrimmedString
  order: UnsignedInt!

  """This category's children"""
  children: CategoryCreationChildrenInput

  """The articles attached to this category"""
  articles: CategoryCreationArticlesInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input CategoryCreationArticlesInput {
  create: [ArticleCreationWithoutCategoryInput!]
}

"""The "Article" node's creation"""
input ArticleCreationWithoutCategoryInput {
  """You can either provide an UUID or let one be generated for you"""
  id: UUIDv4
  status: ArticleStatus! = DRAFT
  title: NonEmptyTrimmedString!

  """You can either provide a slug or let the title be "slugified" for you"""
  slug: NonEmptyTrimmedString

  """The article's body"""
  body: DraftJS

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  machineTags: JSONArray
  tags: ArticleCreationTagsInput
  extension: ArticleCreationExtensionInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input ArticleCreationTagsInput {
  create: [ArticleTagCreationWithoutArticleInput!]
}

"""The "ArticleTag" node's creation"""
input ArticleTagCreationWithoutArticleInput {
  tag: ArticleTagCreationTagInput!
  order: UnsignedInt!
  moderations: ArticleTagCreationModerationsInput
}

input ArticleTagCreationTagInput {
  """
  Connect a "Tag" to a new "ArticleTag" through the "ArticleTag.tag" edge, throw an error if it does not exist.
  """
  connect: TagUniqueFilterInput

  """
  Create a "Tag" and connect it to a new "ArticleTag" through the "ArticleTag.tag" edge.
  """
  create: TagCreationInput

  """
  Create a "Tag" if it does not exist, and connect it to a new "ArticleTag" through the "ArticleTag.tag" edge.
  """
  createIfNotExists: ArticleTagCreationTagCreateIfNotExistsInput
}

"""The "Tag" node's creation"""
input TagCreationInput {
  """You can either provide an UUID or let one be generated for you"""
  id: UUIDv4

  """A tag can be deprecated"""
  deprecated: Boolean
  title: NonEmptyTrimmedString!

  """You can either provide a slug or let the title be "slugified" for you"""
  slug: NonEmptyTrimmedString
  articles: TagCreationArticlesInput
}

input TagCreationArticlesInput {
  create: [ArticleTagCreationWithoutTagInput!]
}

"""The "ArticleTag" node's creation"""
input ArticleTagCreationWithoutTagInput {
  article: ArticleTagCreationArticleInput!
  order: UnsignedInt!
  moderations: ArticleTagCreationModerationsInput
}

input ArticleTagCreationArticleInput {
  """
  Connect an "Article" to a new "ArticleTag" through the "ArticleTag.article" edge, throw an error if it does not exist.
  """
  connect: ArticleUniqueFilterInput

  """
  Create an "Article" and connect it to a new "ArticleTag" through the "ArticleTag.article" edge.
  """
  create: ArticleCreationInput

  """
  Create an "Article" if it does not exist, and connect it to a new "ArticleTag" through the "ArticleTag.article" edge.
  """
  createIfNotExists: ArticleTagCreationArticleCreateIfNotExistsInput
}

input ArticleTagCreationArticleCreateIfNotExistsInput {
  where: ArticleUniqueFilterInput!
  data: ArticleCreationInput!
}

input ArticleTagCreationModerationsInput {
  create: [ArticleTagModerationCreationWithoutArticleTagInput!]
}

"""The "ArticleTagModeration" node's creation"""
input ArticleTagModerationCreationWithoutArticleTagInput {
  moderator: ArticleTagModerationCreationModeratorInput!
  moderation: NonEmptyTrimmedString
}

input ArticleTagModerationCreationModeratorInput {
  """
  Connect a "User" to a new "ArticleTagModeration" through the "ArticleTagModeration.moderator" edge, throw an error if it does not exist.
  """
  connect: UserUniqueFilterInput
}

input ArticleTagCreationTagCreateIfNotExistsInput {
  where: TagUniqueFilterInput!
  data: TagCreationInput!
}

input ArticleCreationExtensionInput {
  create: ArticleExtensionCreationWithoutArticleInput
}

"""The "ArticleExtension" node's creation"""
input ArticleExtensionCreationWithoutArticleInput {
  """The source of the article"""
  source: NonEmptyTrimmedString
}

input ArticleCreationCategoryCreateIfNotExistsInput {
  where: CategoryUniqueFilterInput!
  data: CategoryCreationInput!
}

"""The "Article" node's update"""
input ArticleUpdateInput {
  status: ArticleStatus
  title: NonEmptyTrimmedString
  slug: NonEmptyTrimmedString

  """The article's body"""
  body: DraftJS
  category: ArticleUpdateCategoryInput
  updatedBy: ArticleUpdateUpdatedByInput

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  views: UnsignedBigInt
  score: UnsignedFloat
  machineTags: JSONArray
  tags: ArticleUpdateTagsInput
  extension: ArticleUpdateExtensionInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input ArticleUpdateCategoryInput {
  """
  Connect a "Category" to an existing "Article" through the "Article.category" edge, throw an error if it does not exist.
  """
  connect: CategoryUniqueFilterInput

  """
  Connect a "Category" to an existing "Article" through the "Article.category" edge, if it exists.
  """
  connectIfExists: CategoryUniqueFilterInput
  disconnect: Boolean
  disconnectIfExists: Boolean

  """
  Create a "Category" and connect it to an existing "Article" through the "Article.category" edge.
  """
  create: CategoryCreationInput

  """
  Create a "Category" if it does not exist, and connect it to an existing "Article" through the "Article.category" edge.
  """
  createIfNotExists: ArticleUpdateCategoryCreateIfNotExistsInput

  """
  Update the connected "Category", throw an error if the "Article.category" edge does not exist.
  """
  update: CategoryUpdateInput

  """
  Update the connected "Category", if the "Article.category" edge exists.
  """
  updateIfExists: CategoryUpdateInput
}

input ArticleUpdateCategoryCreateIfNotExistsInput {
  where: CategoryUniqueFilterInput!
  data: CategoryCreationInput!
}

"""The "Category" node's update"""
input CategoryUpdateInput {
  parent: CategoryUpdateParentInput
  order: UnsignedInt

  """This category's children"""
  children: CategoryUpdateChildrenInput

  """The articles attached to this category"""
  articles: CategoryUpdateArticlesInput
}

input CategoryUpdateParentInput {
  """
  Connect a "Category" to an existing "Category" through the "Category.parent" edge, throw an error if it does not exist.
  """
  connect: CategoryUniqueFilterInput

  """
  Connect a "Category" to an existing "Category" through the "Category.parent" edge, if it exists.
  """
  connectIfExists: CategoryUniqueFilterInput
  disconnect: Boolean
  disconnectIfExists: Boolean

  """
  Create a "Category" and connect it to an existing "Category" through the "Category.parent" edge.
  """
  create: CategoryCreationInput

  """
  Create a "Category" if it does not exist, and connect it to an existing "Category" through the "Category.parent" edge.
  """
  createIfNotExists: CategoryUpdateParentCreateIfNotExistsInput

  """
  Update the connected "Category", throw an error if the "Category.parent" edge does not exist.
  """
  update: CategoryUpdateInput

  """Update the connected "Category", if the "Category.parent" edge exists."""
  updateIfExists: CategoryUpdateInput
}

input CategoryUpdateParentCreateIfNotExistsInput {
  where: CategoryUniqueFilterInput!
  data: CategoryCreationInput!
}

input CategoryUpdateChildrenInput {
  deleteAll: Boolean
  deleteMany: CategoryFilterInput
  delete: [CategoryUniqueFilterWithoutParentInput!]
  deleteIfExists: [CategoryUniqueFilterWithoutParentInput!]
  create: [CategoryCreationWithoutParentInput!]
  createIfNotExists: [CategoryUpdateChildrenCreateIfNotExistsInput!]
  updateAll: CategoryUpdateWithoutParentInput
  updateMany: CategoryUpdateChildrenUpdateManyInput
  update: [CategoryUpdateChildrenUpdateInput!]
  updateIfExists: [CategoryUpdateChildrenUpdateIfExistsInput!]
  upsert: [CategoryUpdateChildrenUpsertInput!]
}

"""
Given a "parent", identifies exactly one "Category" with one of the following combination of components' value:
- (parent) / slug
- (parent) / order
"""
input CategoryUniqueFilterWithoutParentInput {
  slug: NonEmptyTrimmedString
  order: UnsignedInt
}

input CategoryUpdateChildrenCreateIfNotExistsInput {
  where: CategoryUniqueFilterWithoutParentInput!
  data: CategoryCreationWithoutParentInput!
}

"""The "Category" node's update"""
input CategoryUpdateWithoutParentInput {
  order: UnsignedInt

  """This category's children"""
  children: CategoryUpdateChildrenInput

  """The articles attached to this category"""
  articles: CategoryUpdateArticlesInput
}

input CategoryUpdateArticlesInput {
  deleteAll: Boolean
  deleteMany: ArticleFilterInput
  delete: [ArticleUniqueFilterWithoutCategoryInput!]
  deleteIfExists: [ArticleUniqueFilterWithoutCategoryInput!]
  create: [ArticleCreationWithoutCategoryInput!]
  createIfNotExists: [CategoryUpdateArticlesCreateIfNotExistsInput!]
  updateAll: ArticleUpdateWithoutCategoryInput
  updateMany: CategoryUpdateArticlesUpdateManyInput
  update: [CategoryUpdateArticlesUpdateInput!]
  updateIfExists: [CategoryUpdateArticlesUpdateIfExistsInput!]
  upsert: [CategoryUpdateArticlesUpsertInput!]
}

"""
Given a "category", identifies exactly one "Article" with one of the following combination of components' value:
- (category) / slug
"""
input ArticleUniqueFilterWithoutCategoryInput {
  slug: NonEmptyTrimmedString!
}

input CategoryUpdateArticlesCreateIfNotExistsInput {
  where: ArticleUniqueFilterWithoutCategoryInput!
  data: ArticleCreationWithoutCategoryInput!
}

"""The "Article" node's update"""
input ArticleUpdateWithoutCategoryInput {
  status: ArticleStatus
  title: NonEmptyTrimmedString
  slug: NonEmptyTrimmedString

  """The article's body"""
  body: DraftJS
  updatedBy: ArticleUpdateUpdatedByInput

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  views: UnsignedBigInt
  score: UnsignedFloat
  machineTags: JSONArray
  tags: ArticleUpdateTagsInput
  extension: ArticleUpdateExtensionInput

  """It is possible to provide the article's body as raw HTML"""
  htmlBody: String
}

input ArticleUpdateUpdatedByInput {
  """
  Connect a "User" to an existing "Article" through the "Article.updatedBy" edge, throw an error if it does not exist.
  """
  connect: UserUniqueFilterInput

  """
  Connect a "User" to an existing "Article" through the "Article.updatedBy" edge, if it exists.
  """
  connectIfExists: UserUniqueFilterInput
  disconnect: Boolean
  disconnectIfExists: Boolean
}

input ArticleUpdateTagsInput {
  deleteAll: Boolean
  deleteMany: ArticleTagFilterInput
  delete: [ArticleTagUniqueFilterWithoutArticleInput!]
  deleteIfExists: [ArticleTagUniqueFilterWithoutArticleInput!]
  create: [ArticleTagCreationWithoutArticleInput!]
  createIfNotExists: [ArticleUpdateTagsCreateIfNotExistsInput!]
  updateAll: ArticleTagUpdateWithoutArticleInput
  updateMany: ArticleUpdateTagsUpdateManyInput
  update: [ArticleUpdateTagsUpdateInput!]
  updateIfExists: [ArticleUpdateTagsUpdateIfExistsInput!]
  upsert: [ArticleUpdateTagsUpsertInput!]
}

"""
Given an "article", identifies exactly one "ArticleTag" with one of the following combination of components' value:
- (article) / tag
- (article) / order
"""
input ArticleTagUniqueFilterWithoutArticleInput {
  tag: TagUniqueFilterInput
  order: UnsignedInt
}

input ArticleUpdateTagsCreateIfNotExistsInput {
  where: ArticleTagUniqueFilterWithoutArticleInput!
  data: ArticleTagCreationWithoutArticleInput!
}

"""The "ArticleTag" node's update"""
input ArticleTagUpdateWithoutArticleInput {
  order: UnsignedInt
  moderations: ArticleTagUpdateModerationsInput
}

input ArticleTagUpdateModerationsInput {
  deleteAll: Boolean
  deleteMany: ArticleTagModerationFilterInput
  delete: [ArticleTagModerationUniqueFilterWithoutArticleTagInput!]
  deleteIfExists: [ArticleTagModerationUniqueFilterWithoutArticleTagInput!]
  create: [ArticleTagModerationCreationWithoutArticleTagInput!]
  createIfNotExists: [ArticleTagUpdateModerationsCreateIfNotExistsInput!]
  updateAll: ArticleTagModerationUpdateWithoutArticleTagInput
  updateMany: ArticleTagUpdateModerationsUpdateManyInput
  update: [ArticleTagUpdateModerationsUpdateInput!]
  updateIfExists: [ArticleTagUpdateModerationsUpdateIfExistsInput!]
  upsert: [ArticleTagUpdateModerationsUpsertInput!]
}

"""
Given an "articleTag", identifies exactly one "ArticleTagModeration" with one of the following combination of components' value:
- (articleTag) / moderator
"""
input ArticleTagModerationUniqueFilterWithoutArticleTagInput {
  moderator: UserUniqueFilterInput!
}

input ArticleTagUpdateModerationsCreateIfNotExistsInput {
  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!
  data: ArticleTagModerationCreationWithoutArticleTagInput!
}

"""The "ArticleTagModeration" node's update"""
input ArticleTagModerationUpdateWithoutArticleTagInput {
  moderation: NonEmptyTrimmedString
}

input ArticleTagUpdateModerationsUpdateManyInput {
  where: ArticleTagModerationFilterInput
  data: ArticleTagModerationUpdateWithoutArticleTagInput
}

input ArticleTagUpdateModerationsUpdateInput {
  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!
  data: ArticleTagModerationUpdateWithoutArticleTagInput
}

input ArticleTagUpdateModerationsUpdateIfExistsInput {
  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!
  data: ArticleTagModerationUpdateWithoutArticleTagInput
}

input ArticleTagUpdateModerationsUpsertInput {
  where: ArticleTagModerationUniqueFilterWithoutArticleTagInput!
  create: ArticleTagModerationCreationWithoutArticleTagInput!
  update: ArticleTagModerationUpdateWithoutArticleTagInput
}

input ArticleUpdateTagsUpdateManyInput {
  where: ArticleTagFilterInput
  data: ArticleTagUpdateWithoutArticleInput
}

input ArticleUpdateTagsUpdateInput {
  where: ArticleTagUniqueFilterWithoutArticleInput!
  data: ArticleTagUpdateWithoutArticleInput
}

input ArticleUpdateTagsUpdateIfExistsInput {
  where: ArticleTagUniqueFilterWithoutArticleInput!
  data: ArticleTagUpdateWithoutArticleInput
}

input ArticleUpdateTagsUpsertInput {
  where: ArticleTagUniqueFilterWithoutArticleInput!
  create: ArticleTagCreationWithoutArticleInput!
  update: ArticleTagUpdateWithoutArticleInput
}

input ArticleUpdateExtensionInput {
  delete: Boolean
  deleteIfExists: Boolean
  create: ArticleExtensionCreationWithoutArticleInput
  createIfNotExists: ArticleExtensionCreationWithoutArticleInput
  update: ArticleExtensionUpdateWithoutArticleInput
  updateIfExists: ArticleExtensionUpdateWithoutArticleInput
  upsert: ArticleUpdateExtensionUpsertInput
}

"""The "ArticleExtension" node's update"""
input ArticleExtensionUpdateWithoutArticleInput {
  """The source of the article"""
  source: NonEmptyTrimmedString
}

input ArticleUpdateExtensionUpsertInput {
  create: ArticleExtensionCreationWithoutArticleInput!
  update: ArticleExtensionUpdateWithoutArticleInput
}

input CategoryUpdateArticlesUpdateManyInput {
  where: ArticleFilterInput
  data: ArticleUpdateWithoutCategoryInput
}

input CategoryUpdateArticlesUpdateInput {
  where: ArticleUniqueFilterWithoutCategoryInput!
  data: ArticleUpdateWithoutCategoryInput
}

input CategoryUpdateArticlesUpdateIfExistsInput {
  where: ArticleUniqueFilterWithoutCategoryInput!
  data: ArticleUpdateWithoutCategoryInput
}

input CategoryUpdateArticlesUpsertInput {
  where: ArticleUniqueFilterWithoutCategoryInput!
  create: ArticleCreationWithoutCategoryInput!
  update: ArticleUpdateWithoutCategoryInput
}

input CategoryUpdateChildrenUpdateManyInput {
  where: CategoryFilterInput
  data: CategoryUpdateWithoutParentInput
}

input CategoryUpdateChildrenUpdateInput {
  where: CategoryUniqueFilterWithoutParentInput!
  data: CategoryUpdateWithoutParentInput
}

input CategoryUpdateChildrenUpdateIfExistsInput {
  where: CategoryUniqueFilterWithoutParentInput!
  data: CategoryUpdateWithoutParentInput
}

input CategoryUpdateChildrenUpsertInput {
  where: CategoryUniqueFilterWithoutParentInput!
  create: CategoryCreationWithoutParentInput!
  update: CategoryUpdateWithoutParentInput
}

"""The "ArticleExtension" node's creation"""
input ArticleExtensionCreationInput {
  article: ArticleExtensionCreationArticleInput!

  """The source of the article"""
  source: NonEmptyTrimmedString
}

input ArticleExtensionCreationArticleInput {
  """
  Connect an "Article" to a new "ArticleExtension" through the "ArticleExtension.article" edge, throw an error if it does not exist.
  """
  connect: ArticleUniqueFilterInput

  """
  Create an "Article" and connect it to a new "ArticleExtension" through the "ArticleExtension.article" edge.
  """
  create: ArticleCreationInput

  """
  Create an "Article" if it does not exist, and connect it to a new "ArticleExtension" through the "ArticleExtension.article" edge.
  """
  createIfNotExists: ArticleExtensionCreationArticleCreateIfNotExistsInput
}

input ArticleExtensionCreationArticleCreateIfNotExistsInput {
  where: ArticleUniqueFilterInput!
  data: ArticleCreationInput!
}

"""The "ArticleExtension" node's update"""
input ArticleExtensionUpdateInput {
  """The source of the article"""
  source: NonEmptyTrimmedString
}

"""The "Tag" node's update"""
input TagUpdateInput {
  """A tag can be deprecated"""
  deprecated: Boolean
  articles: TagUpdateArticlesInput
}

input TagUpdateArticlesInput {
  deleteAll: Boolean
  deleteMany: ArticleTagFilterInput
  delete: [ArticleTagUniqueFilterWithoutTagInput!]
  deleteIfExists: [ArticleTagUniqueFilterWithoutTagInput!]
  create: [ArticleTagCreationWithoutTagInput!]
  createIfNotExists: [TagUpdateArticlesCreateIfNotExistsInput!]
  updateAll: ArticleTagUpdateWithoutTagInput
  updateMany: TagUpdateArticlesUpdateManyInput
  update: [TagUpdateArticlesUpdateInput!]
  updateIfExists: [TagUpdateArticlesUpdateIfExistsInput!]
  upsert: [TagUpdateArticlesUpsertInput!]
}

"""
Given a "tag", identifies exactly one "ArticleTag" with one of the following combination of components' value:
- article / (tag)
"""
input ArticleTagUniqueFilterWithoutTagInput {
  article: ArticleUniqueFilterInput!
}

input TagUpdateArticlesCreateIfNotExistsInput {
  where: ArticleTagUniqueFilterWithoutTagInput!
  data: ArticleTagCreationWithoutTagInput!
}

"""The "ArticleTag" node's update"""
input ArticleTagUpdateWithoutTagInput {
  order: UnsignedInt
  moderations: ArticleTagUpdateModerationsInput
}

input TagUpdateArticlesUpdateManyInput {
  where: ArticleTagFilterInput
  data: ArticleTagUpdateWithoutTagInput
}

input TagUpdateArticlesUpdateInput {
  where: ArticleTagUniqueFilterWithoutTagInput!
  data: ArticleTagUpdateWithoutTagInput
}

input TagUpdateArticlesUpdateIfExistsInput {
  where: ArticleTagUniqueFilterWithoutTagInput!
  data: ArticleTagUpdateWithoutTagInput
}

input TagUpdateArticlesUpsertInput {
  where: ArticleTagUniqueFilterWithoutTagInput!
  create: ArticleTagCreationWithoutTagInput!
  update: ArticleTagUpdateWithoutTagInput
}

"""The "ArticleTag" node's creation"""
input ArticleTagCreationInput {
  article: ArticleTagCreationArticleInput!
  tag: ArticleTagCreationTagInput!
  order: UnsignedInt!
  moderations: ArticleTagCreationModerationsInput
}

"""The "ArticleTag" node's update"""
input ArticleTagUpdateInput {
  order: UnsignedInt
  moderations: ArticleTagUpdateModerationsInput
}

"""The "ArticleTagModeration" node's creation"""
input ArticleTagModerationCreationInput {
  articleTag: ArticleTagModerationCreationArticleTagInput!
  moderator: ArticleTagModerationCreationModeratorInput!
  moderation: NonEmptyTrimmedString
}

input ArticleTagModerationCreationArticleTagInput {
  """
  Connect an "ArticleTag" to a new "ArticleTagModeration" through the "ArticleTagModeration.articleTag" edge, throw an error if it does not exist.
  """
  connect: ArticleTagUniqueFilterInput

  """
  Create an "ArticleTag" and connect it to a new "ArticleTagModeration" through the "ArticleTagModeration.articleTag" edge.
  """
  create: ArticleTagCreationInput

  """
  Create an "ArticleTag" if it does not exist, and connect it to a new "ArticleTagModeration" through the "ArticleTagModeration.articleTag" edge.
  """
  createIfNotExists: ArticleTagModerationCreationArticleTagCreateIfNotExistsInput
}

input ArticleTagModerationCreationArticleTagCreateIfNotExistsInput {
  where: ArticleTagUniqueFilterInput!
  data: ArticleTagCreationInput!
}

"""The "ArticleTagModeration" node's update"""
input ArticleTagModerationUpdateInput {
  moderation: NonEmptyTrimmedString
}

"""The "UserProfile" node's creation"""
input UserProfileCreationInput {
  user: UserProfileCreationUserInput!
  birthday: Date
  facebookId: ID
  googleId: ID
  twitterHandle: ID
}

input UserProfileCreationUserInput {
  """
  Connect a "User" to a new "UserProfile" through the "UserProfile.user" edge, throw an error if it does not exist.
  """
  connect: UserUniqueFilterInput
}

"""The "UserProfile" node's update"""
input UserProfileUpdateInput {
  birthday: Date
  facebookId: ID
  googleId: ID
  twitterHandle: ID
}

type subscription {
  """Subscribe to the "Articles"' changes"""
  articleChanges(where: ArticleFilterInput): ArticleChange

  """
  Scroll the "Articles"
  """
  articles(where: ArticleFilterInput): Article

  """Subscribe to the "Categories"' changes"""
  categoryChanges(where: CategoryFilterInput): CategoryChange

  """
  Scroll the "Categories"
  """
  categories(where: CategoryFilterInput): Category

  """Subscribe to the "Tags"' changes"""
  tagChanges(where: TagFilterInput): TagChange

  """Subscribe to the "Users"' changes"""
  userChanges(where: UserFilterInput): UserChange

  """Subscribe to the "UserProfiles"' changes"""
  userProfileChanges(where: UserProfileFilterInput): UserProfileChange
}

"""
A single change in the "articleChanges"'s subscription, either a deletion (= "ArticleDeletion") or an upsert (= "Article")
"""
union ArticleChange = ArticleDeletion | Article

"""A single deletion in the "articleChanges"'s subscription"""
type ArticleDeletion {
  """This UUID identifies an Article publicly"""
  id: UUIDv4!
  status: ArticleStatus!
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!

  """The article's body"""
  body: DraftJS
  createdBy: UserId
  createdAt: DateTime!
  updatedBy: UserUsername
  updatedAt: DateTime!

  """Contains any arbitrary data you want to store alongside the article"""
  metas: JSONObject

  """Is the article highlighted?"""
  highlighted: Boolean

  """Is the article a partnership?"""
  sponsored: Boolean
  views: UnsignedBigInt!
  score: UnsignedFloat!
  machineTags: JSONArray
}

type UserId {
  id: UUIDv4!
}

type UserUsername {
  username: NonEmptyTrimmedString!
}

"""
A single change in the "categoryChanges"'s subscription, either a deletion (= "CategoryDeletion") or an upsert (= "Category")
"""
union CategoryChange = CategoryDeletion | Category

"""A single deletion in the "categoryChanges"'s subscription"""
type CategoryDeletion {
  id: UUIDv4!
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!
  order: UnsignedInt!
}

"""
A single change in the "tagChanges"'s subscription, either a deletion (= "TagDeletion") or an upsert (= "Tag")
"""
union TagChange = TagDeletion | Tag

"""A single deletion in the "tagChanges"'s subscription"""
type TagDeletion {
  id: UUIDv4!

  """A tag can be deprecated"""
  deprecated: Boolean
  title: NonEmptyTrimmedString!
  slug: NonEmptyTrimmedString!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A single change in the "userChanges"'s subscription, either a deletion (= "UserDeletion") or an upsert (= "User")
"""
union UserChange = UserDeletion | User

"""A single deletion in the "userChanges"'s subscription"""
type UserDeletion {
  id: UUIDv4!
  username: NonEmptyTrimmedString!
}

"""
A single change in the "userProfileChanges"'s subscription, either a deletion (= "UserProfileDeletion") or an upsert (= "UserProfile")
"""
union UserProfileChange = UserProfileDeletion | UserProfile

"""A single deletion in the "userProfileChanges"'s subscription"""
type UserProfileDeletion {
  user: UserId!
  birthday: Date
  facebookId: ID
  googleId: ID
  twitterHandle: ID
}"
`;
